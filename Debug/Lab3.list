
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf8  08002cf8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cf8  08002cf8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cf8  08002cf8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000005c  08002d5c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002d5c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b00  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1f  00000000  00000000  00029b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017143  00000000  00000000  0002ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e663  00000000  00000000  00043e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008258f  00000000  00000000  0005246e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d49fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000d4a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cbc 	.word	0x08002cbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002cbc 	.word	0x08002cbc

0800014c <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;


int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <subKeyProcess>:
void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if(i==0){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d103      	bne.n	80001ce <subKeyProcess+0x16>
		button1_flag = 1;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <subKeyProcess+0x3c>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
		button2_flag = 1;
	}
	else if(i == 2){
		button3_flag = 1;
	}
}
 80001cc:	e00c      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i==1){
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d103      	bne.n	80001dc <subKeyProcess+0x24>
		button2_flag = 1;
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <subKeyProcess+0x40>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	e005      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 2){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d102      	bne.n	80001e8 <subKeyProcess+0x30>
		button3_flag = 1;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <subKeyProcess+0x44>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000078 	.word	0x20000078
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	20000080 	.word	0x20000080

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
  for(int i=0;i<3;i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e084      	b.n	8000316 <getKeyInput+0x116>
	  KeyReg0[i] = KeyReg1[i];
 800020c:	4a46      	ldr	r2, [pc, #280]	; (8000328 <getKeyInput+0x128>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4945      	ldr	r1, [pc, #276]	; (800032c <getKeyInput+0x12c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 800021c:	4a44      	ldr	r2, [pc, #272]	; (8000330 <getKeyInput+0x130>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4940      	ldr	r1, [pc, #256]	; (8000328 <getKeyInput+0x128>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  switch(i){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b02      	cmp	r3, #2
 8000230:	d021      	beq.n	8000276 <getKeyInput+0x76>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b02      	cmp	r3, #2
 8000236:	dc2a      	bgt.n	800028e <getKeyInput+0x8e>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d003      	beq.n	8000246 <getKeyInput+0x46>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d00c      	beq.n	800025e <getKeyInput+0x5e>
 8000244:	e023      	b.n	800028e <getKeyInput+0x8e>
	  case 0:
		  KeyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024a:	483a      	ldr	r0, [pc, #232]	; (8000334 <getKeyInput+0x134>)
 800024c:	f001 fd0a 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	4619      	mov	r1, r3
 8000254:	4a36      	ldr	r2, [pc, #216]	; (8000330 <getKeyInput+0x130>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  break;
 800025c:	e017      	b.n	800028e <getKeyInput+0x8e>
	  case 1:
		  KeyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 800025e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000262:	4834      	ldr	r0, [pc, #208]	; (8000334 <getKeyInput+0x134>)
 8000264:	f001 fcfe 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	4619      	mov	r1, r3
 800026c:	4a30      	ldr	r2, [pc, #192]	; (8000330 <getKeyInput+0x130>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  break;
 8000274:	e00b      	b.n	800028e <getKeyInput+0x8e>
	  case 2:
		  KeyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	482e      	ldr	r0, [pc, #184]	; (8000334 <getKeyInput+0x134>)
 800027c:	f001 fcf2 	bl	8001c64 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	4619      	mov	r1, r3
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <getKeyInput+0x130>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  break;
 800028c:	bf00      	nop
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <getKeyInput+0x128>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000296:	4925      	ldr	r1, [pc, #148]	; (800032c <getKeyInput+0x12c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d136      	bne.n	8000310 <getKeyInput+0x110>
 80002a2:	4a21      	ldr	r2, [pc, #132]	; (8000328 <getKeyInput+0x128>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002aa:	4921      	ldr	r1, [pc, #132]	; (8000330 <getKeyInput+0x130>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d12c      	bne.n	8000310 <getKeyInput+0x110>
		  if (KeyReg2[i] != KeyReg3[i]){
 80002b6:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <getKeyInput+0x130>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	491e      	ldr	r1, [pc, #120]	; (8000338 <getKeyInput+0x138>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d014      	beq.n	80002f4 <getKeyInput+0xf4>
			  KeyReg3[i] = KeyReg2[i];
 80002ca:	4a19      	ldr	r2, [pc, #100]	; (8000330 <getKeyInput+0x130>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d2:	4919      	ldr	r1, [pc, #100]	; (8000338 <getKeyInput+0x138>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 80002da:	4a15      	ldr	r2, [pc, #84]	; (8000330 <getKeyInput+0x130>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d114      	bne.n	8000310 <getKeyInput+0x110>
				TimeOutForKeyPress = 100;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <getKeyInput+0x13c>)
 80002e8:	2264      	movs	r2, #100	; 0x64
 80002ea:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff63 	bl	80001b8 <subKeyProcess>
 80002f2:	e00d      	b.n	8000310 <getKeyInput+0x110>
			  }
		}else{
		   TimeOutForKeyPress --;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <getKeyInput+0x13c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	4a10      	ldr	r2, [pc, #64]	; (800033c <getKeyInput+0x13c>)
 80002fc:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0){
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <getKeyInput+0x13c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d104      	bne.n	8000310 <getKeyInput+0x110>
			  KeyReg3[i] = NORMAL_STATE;
 8000306:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <getKeyInput+0x138>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2101      	movs	r1, #1
 800030c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<3;i++){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b02      	cmp	r3, #2
 800031a:	f77f af77 	ble.w	800020c <getKeyInput+0xc>
			}
		}
	  }
	}
}
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	2000000c 	.word	0x2000000c
 800032c:	20000000 	.word	0x20000000
 8000330:	20000018 	.word	0x20000018
 8000334:	40010800 	.word	0x40010800
 8000338:	20000024 	.word	0x20000024
 800033c:	20000030 	.word	0x20000030

08000340 <display7SEG1>:
#include"display.h"
int automatic_7SEG = E01;
void display7SEG1 (int counter){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b09      	cmp	r3, #9
 800034c:	f200 8180 	bhi.w	8000650 <display7SEG1+0x310>
 8000350:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <display7SEG1+0x18>)
 8000352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000356:	bf00      	nop
 8000358:	08000381 	.word	0x08000381
 800035c:	080003c9 	.word	0x080003c9
 8000360:	08000411 	.word	0x08000411
 8000364:	08000459 	.word	0x08000459
 8000368:	080004a1 	.word	0x080004a1
 800036c:	080004e9 	.word	0x080004e9
 8000370:	08000531 	.word	0x08000531
 8000374:	08000579 	.word	0x08000579
 8000378:	080005c1 	.word	0x080005c1
 800037c:	08000609 	.word	0x08000609
  	switch(counter){
  	case 0:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	48b4      	ldr	r0, [pc, #720]	; (8000658 <display7SEG1+0x318>)
 8000386:	f001 fc84 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2102      	movs	r1, #2
 800038e:	48b2      	ldr	r0, [pc, #712]	; (8000658 <display7SEG1+0x318>)
 8000390:	f001 fc7f 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2104      	movs	r1, #4
 8000398:	48af      	ldr	r0, [pc, #700]	; (8000658 <display7SEG1+0x318>)
 800039a:	f001 fc7a 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2108      	movs	r1, #8
 80003a2:	48ad      	ldr	r0, [pc, #692]	; (8000658 <display7SEG1+0x318>)
 80003a4:	f001 fc75 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	48aa      	ldr	r0, [pc, #680]	; (8000658 <display7SEG1+0x318>)
 80003ae:	f001 fc70 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2120      	movs	r1, #32
 80003b6:	48a8      	ldr	r0, [pc, #672]	; (8000658 <display7SEG1+0x318>)
 80003b8:	f001 fc6b 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	48a5      	ldr	r0, [pc, #660]	; (8000658 <display7SEG1+0x318>)
 80003c2:	f001 fc66 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80003c6:	e143      	b.n	8000650 <display7SEG1+0x310>
  			}
  	case 1:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	48a2      	ldr	r0, [pc, #648]	; (8000658 <display7SEG1+0x318>)
 80003ce:	f001 fc60 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2102      	movs	r1, #2
 80003d6:	48a0      	ldr	r0, [pc, #640]	; (8000658 <display7SEG1+0x318>)
 80003d8:	f001 fc5b 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	489d      	ldr	r0, [pc, #628]	; (8000658 <display7SEG1+0x318>)
 80003e2:	f001 fc56 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2108      	movs	r1, #8
 80003ea:	489b      	ldr	r0, [pc, #620]	; (8000658 <display7SEG1+0x318>)
 80003ec:	f001 fc51 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2110      	movs	r1, #16
 80003f4:	4898      	ldr	r0, [pc, #608]	; (8000658 <display7SEG1+0x318>)
 80003f6:	f001 fc4c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	4896      	ldr	r0, [pc, #600]	; (8000658 <display7SEG1+0x318>)
 8000400:	f001 fc47 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	4893      	ldr	r0, [pc, #588]	; (8000658 <display7SEG1+0x318>)
 800040a:	f001 fc42 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800040e:	e11f      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 2:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4890      	ldr	r0, [pc, #576]	; (8000658 <display7SEG1+0x318>)
 8000416:	f001 fc3c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	488e      	ldr	r0, [pc, #568]	; (8000658 <display7SEG1+0x318>)
 8000420:	f001 fc37 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2104      	movs	r1, #4
 8000428:	488b      	ldr	r0, [pc, #556]	; (8000658 <display7SEG1+0x318>)
 800042a:	f001 fc32 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	4889      	ldr	r0, [pc, #548]	; (8000658 <display7SEG1+0x318>)
 8000434:	f001 fc2d 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2110      	movs	r1, #16
 800043c:	4886      	ldr	r0, [pc, #536]	; (8000658 <display7SEG1+0x318>)
 800043e:	f001 fc28 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2120      	movs	r1, #32
 8000446:	4884      	ldr	r0, [pc, #528]	; (8000658 <display7SEG1+0x318>)
 8000448:	f001 fc23 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2140      	movs	r1, #64	; 0x40
 8000450:	4881      	ldr	r0, [pc, #516]	; (8000658 <display7SEG1+0x318>)
 8000452:	f001 fc1e 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 8000456:	e0fb      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 3:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2101      	movs	r1, #1
 800045c:	487e      	ldr	r0, [pc, #504]	; (8000658 <display7SEG1+0x318>)
 800045e:	f001 fc18 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2102      	movs	r1, #2
 8000466:	487c      	ldr	r0, [pc, #496]	; (8000658 <display7SEG1+0x318>)
 8000468:	f001 fc13 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2104      	movs	r1, #4
 8000470:	4879      	ldr	r0, [pc, #484]	; (8000658 <display7SEG1+0x318>)
 8000472:	f001 fc0e 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2108      	movs	r1, #8
 800047a:	4877      	ldr	r0, [pc, #476]	; (8000658 <display7SEG1+0x318>)
 800047c:	f001 fc09 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2110      	movs	r1, #16
 8000484:	4874      	ldr	r0, [pc, #464]	; (8000658 <display7SEG1+0x318>)
 8000486:	f001 fc04 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2120      	movs	r1, #32
 800048e:	4872      	ldr	r0, [pc, #456]	; (8000658 <display7SEG1+0x318>)
 8000490:	f001 fbff 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	486f      	ldr	r0, [pc, #444]	; (8000658 <display7SEG1+0x318>)
 800049a:	f001 fbfa 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800049e:	e0d7      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 4:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	486c      	ldr	r0, [pc, #432]	; (8000658 <display7SEG1+0x318>)
 80004a6:	f001 fbf4 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2102      	movs	r1, #2
 80004ae:	486a      	ldr	r0, [pc, #424]	; (8000658 <display7SEG1+0x318>)
 80004b0:	f001 fbef 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2104      	movs	r1, #4
 80004b8:	4867      	ldr	r0, [pc, #412]	; (8000658 <display7SEG1+0x318>)
 80004ba:	f001 fbea 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	4865      	ldr	r0, [pc, #404]	; (8000658 <display7SEG1+0x318>)
 80004c4:	f001 fbe5 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	4862      	ldr	r0, [pc, #392]	; (8000658 <display7SEG1+0x318>)
 80004ce:	f001 fbe0 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2120      	movs	r1, #32
 80004d6:	4860      	ldr	r0, [pc, #384]	; (8000658 <display7SEG1+0x318>)
 80004d8:	f001 fbdb 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	485d      	ldr	r0, [pc, #372]	; (8000658 <display7SEG1+0x318>)
 80004e2:	f001 fbd6 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80004e6:	e0b3      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 5:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	485a      	ldr	r0, [pc, #360]	; (8000658 <display7SEG1+0x318>)
 80004ee:	f001 fbd0 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	4858      	ldr	r0, [pc, #352]	; (8000658 <display7SEG1+0x318>)
 80004f8:	f001 fbcb 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2104      	movs	r1, #4
 8000500:	4855      	ldr	r0, [pc, #340]	; (8000658 <display7SEG1+0x318>)
 8000502:	f001 fbc6 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	4853      	ldr	r0, [pc, #332]	; (8000658 <display7SEG1+0x318>)
 800050c:	f001 fbc1 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4850      	ldr	r0, [pc, #320]	; (8000658 <display7SEG1+0x318>)
 8000516:	f001 fbbc 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	484e      	ldr	r0, [pc, #312]	; (8000658 <display7SEG1+0x318>)
 8000520:	f001 fbb7 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	484b      	ldr	r0, [pc, #300]	; (8000658 <display7SEG1+0x318>)
 800052a:	f001 fbb2 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800052e:	e08f      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 6:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	4848      	ldr	r0, [pc, #288]	; (8000658 <display7SEG1+0x318>)
 8000536:	f001 fbac 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2102      	movs	r1, #2
 800053e:	4846      	ldr	r0, [pc, #280]	; (8000658 <display7SEG1+0x318>)
 8000540:	f001 fba7 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2104      	movs	r1, #4
 8000548:	4843      	ldr	r0, [pc, #268]	; (8000658 <display7SEG1+0x318>)
 800054a:	f001 fba2 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2108      	movs	r1, #8
 8000552:	4841      	ldr	r0, [pc, #260]	; (8000658 <display7SEG1+0x318>)
 8000554:	f001 fb9d 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2110      	movs	r1, #16
 800055c:	483e      	ldr	r0, [pc, #248]	; (8000658 <display7SEG1+0x318>)
 800055e:	f001 fb98 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	483c      	ldr	r0, [pc, #240]	; (8000658 <display7SEG1+0x318>)
 8000568:	f001 fb93 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	4839      	ldr	r0, [pc, #228]	; (8000658 <display7SEG1+0x318>)
 8000572:	f001 fb8e 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 8000576:	e06b      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 7:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4836      	ldr	r0, [pc, #216]	; (8000658 <display7SEG1+0x318>)
 800057e:	f001 fb88 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2102      	movs	r1, #2
 8000586:	4834      	ldr	r0, [pc, #208]	; (8000658 <display7SEG1+0x318>)
 8000588:	f001 fb83 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2104      	movs	r1, #4
 8000590:	4831      	ldr	r0, [pc, #196]	; (8000658 <display7SEG1+0x318>)
 8000592:	f001 fb7e 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2108      	movs	r1, #8
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <display7SEG1+0x318>)
 800059c:	f001 fb79 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <display7SEG1+0x318>)
 80005a6:	f001 fb74 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	482a      	ldr	r0, [pc, #168]	; (8000658 <display7SEG1+0x318>)
 80005b0:	f001 fb6f 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2140      	movs	r1, #64	; 0x40
 80005b8:	4827      	ldr	r0, [pc, #156]	; (8000658 <display7SEG1+0x318>)
 80005ba:	f001 fb6a 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80005be:	e047      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 8:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	4824      	ldr	r0, [pc, #144]	; (8000658 <display7SEG1+0x318>)
 80005c6:	f001 fb64 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	4822      	ldr	r0, [pc, #136]	; (8000658 <display7SEG1+0x318>)
 80005d0:	f001 fb5f 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	481f      	ldr	r0, [pc, #124]	; (8000658 <display7SEG1+0x318>)
 80005da:	f001 fb5a 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	481d      	ldr	r0, [pc, #116]	; (8000658 <display7SEG1+0x318>)
 80005e4:	f001 fb55 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	481a      	ldr	r0, [pc, #104]	; (8000658 <display7SEG1+0x318>)
 80005ee:	f001 fb50 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <display7SEG1+0x318>)
 80005f8:	f001 fb4b 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <display7SEG1+0x318>)
 8000602:	f001 fb46 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 8000606:	e023      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 9:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <display7SEG1+0x318>)
 800060e:	f001 fb40 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <display7SEG1+0x318>)
 8000618:	f001 fb3b 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2104      	movs	r1, #4
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <display7SEG1+0x318>)
 8000622:	f001 fb36 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <display7SEG1+0x318>)
 800062c:	f001 fb31 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <display7SEG1+0x318>)
 8000636:	f001 fb2c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <display7SEG1+0x318>)
 8000640:	f001 fb27 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <display7SEG1+0x318>)
 800064a:	f001 fb22 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800064e:	bf00      	nop
  		}
  	}
 }
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40010c00 	.word	0x40010c00

0800065c <display7SEG2>:

void display7SEG2 (int counter){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b09      	cmp	r3, #9
 8000668:	f200 81bc 	bhi.w	80009e4 <display7SEG2+0x388>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <display7SEG2+0x18>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	0800069d 	.word	0x0800069d
 8000678:	080006f1 	.word	0x080006f1
 800067c:	08000745 	.word	0x08000745
 8000680:	08000799 	.word	0x08000799
 8000684:	080007ed 	.word	0x080007ed
 8000688:	08000841 	.word	0x08000841
 800068c:	08000895 	.word	0x08000895
 8000690:	080008e9 	.word	0x080008e9
 8000694:	0800093d 	.word	0x0800093d
 8000698:	08000991 	.word	0x08000991
  	switch(counter){
  	case 0:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	48d2      	ldr	r0, [pc, #840]	; (80009ec <display7SEG2+0x390>)
 80006a2:	f001 faf6 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	48cf      	ldr	r0, [pc, #828]	; (80009ec <display7SEG2+0x390>)
 80006ae:	f001 faf0 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b8:	48cc      	ldr	r0, [pc, #816]	; (80009ec <display7SEG2+0x390>)
 80006ba:	f001 faea 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	48c9      	ldr	r0, [pc, #804]	; (80009ec <display7SEG2+0x390>)
 80006c6:	f001 fae4 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	48c6      	ldr	r0, [pc, #792]	; (80009ec <display7SEG2+0x390>)
 80006d2:	f001 fade 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	48c3      	ldr	r0, [pc, #780]	; (80009ec <display7SEG2+0x390>)
 80006de:	f001 fad8 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	48c0      	ldr	r0, [pc, #768]	; (80009ec <display7SEG2+0x390>)
 80006ea:	f001 fad2 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80006ee:	e179      	b.n	80009e4 <display7SEG2+0x388>
  			}
  	case 1:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	48bd      	ldr	r0, [pc, #756]	; (80009ec <display7SEG2+0x390>)
 80006f6:	f001 facc 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	48ba      	ldr	r0, [pc, #744]	; (80009ec <display7SEG2+0x390>)
 8000702:	f001 fac6 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	48b7      	ldr	r0, [pc, #732]	; (80009ec <display7SEG2+0x390>)
 800070e:	f001 fac0 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	48b4      	ldr	r0, [pc, #720]	; (80009ec <display7SEG2+0x390>)
 800071a:	f001 faba 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	48b1      	ldr	r0, [pc, #708]	; (80009ec <display7SEG2+0x390>)
 8000726:	f001 fab4 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	48ae      	ldr	r0, [pc, #696]	; (80009ec <display7SEG2+0x390>)
 8000732:	f001 faae 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	48ab      	ldr	r0, [pc, #684]	; (80009ec <display7SEG2+0x390>)
 800073e:	f001 faa8 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 8000742:	e14f      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 2:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	48a8      	ldr	r0, [pc, #672]	; (80009ec <display7SEG2+0x390>)
 800074a:	f001 faa2 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	48a5      	ldr	r0, [pc, #660]	; (80009ec <display7SEG2+0x390>)
 8000756:	f001 fa9c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000760:	48a2      	ldr	r0, [pc, #648]	; (80009ec <display7SEG2+0x390>)
 8000762:	f001 fa96 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	489f      	ldr	r0, [pc, #636]	; (80009ec <display7SEG2+0x390>)
 800076e:	f001 fa90 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	489c      	ldr	r0, [pc, #624]	; (80009ec <display7SEG2+0x390>)
 800077a:	f001 fa8a 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	4899      	ldr	r0, [pc, #612]	; (80009ec <display7SEG2+0x390>)
 8000786:	f001 fa84 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4896      	ldr	r0, [pc, #600]	; (80009ec <display7SEG2+0x390>)
 8000792:	f001 fa7e 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 8000796:	e125      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 3:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4893      	ldr	r0, [pc, #588]	; (80009ec <display7SEG2+0x390>)
 800079e:	f001 fa78 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	4890      	ldr	r0, [pc, #576]	; (80009ec <display7SEG2+0x390>)
 80007aa:	f001 fa72 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	488d      	ldr	r0, [pc, #564]	; (80009ec <display7SEG2+0x390>)
 80007b6:	f001 fa6c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c0:	488a      	ldr	r0, [pc, #552]	; (80009ec <display7SEG2+0x390>)
 80007c2:	f001 fa66 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4887      	ldr	r0, [pc, #540]	; (80009ec <display7SEG2+0x390>)
 80007ce:	f001 fa60 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	4884      	ldr	r0, [pc, #528]	; (80009ec <display7SEG2+0x390>)
 80007da:	f001 fa5a 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4881      	ldr	r0, [pc, #516]	; (80009ec <display7SEG2+0x390>)
 80007e6:	f001 fa54 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80007ea:	e0fb      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 4:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	487e      	ldr	r0, [pc, #504]	; (80009ec <display7SEG2+0x390>)
 80007f2:	f001 fa4e 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fc:	487b      	ldr	r0, [pc, #492]	; (80009ec <display7SEG2+0x390>)
 80007fe:	f001 fa48 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	4878      	ldr	r0, [pc, #480]	; (80009ec <display7SEG2+0x390>)
 800080a:	f001 fa42 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000814:	4875      	ldr	r0, [pc, #468]	; (80009ec <display7SEG2+0x390>)
 8000816:	f001 fa3c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000820:	4872      	ldr	r0, [pc, #456]	; (80009ec <display7SEG2+0x390>)
 8000822:	f001 fa36 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	486f      	ldr	r0, [pc, #444]	; (80009ec <display7SEG2+0x390>)
 800082e:	f001 fa30 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	486c      	ldr	r0, [pc, #432]	; (80009ec <display7SEG2+0x390>)
 800083a:	f001 fa2a 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800083e:	e0d1      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 5:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4869      	ldr	r0, [pc, #420]	; (80009ec <display7SEG2+0x390>)
 8000846:	f001 fa24 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4866      	ldr	r0, [pc, #408]	; (80009ec <display7SEG2+0x390>)
 8000852:	f001 fa1e 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085c:	4863      	ldr	r0, [pc, #396]	; (80009ec <display7SEG2+0x390>)
 800085e:	f001 fa18 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000868:	4860      	ldr	r0, [pc, #384]	; (80009ec <display7SEG2+0x390>)
 800086a:	f001 fa12 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000874:	485d      	ldr	r0, [pc, #372]	; (80009ec <display7SEG2+0x390>)
 8000876:	f001 fa0c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000880:	485a      	ldr	r0, [pc, #360]	; (80009ec <display7SEG2+0x390>)
 8000882:	f001 fa06 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	4857      	ldr	r0, [pc, #348]	; (80009ec <display7SEG2+0x390>)
 800088e:	f001 fa00 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 8000892:	e0a7      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 6:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	4854      	ldr	r0, [pc, #336]	; (80009ec <display7SEG2+0x390>)
 800089a:	f001 f9fa 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	4851      	ldr	r0, [pc, #324]	; (80009ec <display7SEG2+0x390>)
 80008a6:	f001 f9f4 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <display7SEG2+0x390>)
 80008b2:	f001 f9ee 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	484b      	ldr	r0, [pc, #300]	; (80009ec <display7SEG2+0x390>)
 80008be:	f001 f9e8 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c8:	4848      	ldr	r0, [pc, #288]	; (80009ec <display7SEG2+0x390>)
 80008ca:	f001 f9e2 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d4:	4845      	ldr	r0, [pc, #276]	; (80009ec <display7SEG2+0x390>)
 80008d6:	f001 f9dc 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <display7SEG2+0x390>)
 80008e2:	f001 f9d6 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80008e6:	e07d      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 7:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	483f      	ldr	r0, [pc, #252]	; (80009ec <display7SEG2+0x390>)
 80008ee:	f001 f9d0 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <display7SEG2+0x390>)
 80008fa:	f001 f9ca 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000904:	4839      	ldr	r0, [pc, #228]	; (80009ec <display7SEG2+0x390>)
 8000906:	f001 f9c4 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	4836      	ldr	r0, [pc, #216]	; (80009ec <display7SEG2+0x390>)
 8000912:	f001 f9be 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091c:	4833      	ldr	r0, [pc, #204]	; (80009ec <display7SEG2+0x390>)
 800091e:	f001 f9b8 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <display7SEG2+0x390>)
 800092a:	f001 f9b2 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <display7SEG2+0x390>)
 8000936:	f001 f9ac 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800093a:	e053      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 8:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <display7SEG2+0x390>)
 8000942:	f001 f9a6 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094c:	4827      	ldr	r0, [pc, #156]	; (80009ec <display7SEG2+0x390>)
 800094e:	f001 f9a0 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	4824      	ldr	r0, [pc, #144]	; (80009ec <display7SEG2+0x390>)
 800095a:	f001 f99a 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <display7SEG2+0x390>)
 8000966:	f001 f994 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	481e      	ldr	r0, [pc, #120]	; (80009ec <display7SEG2+0x390>)
 8000972:	f001 f98e 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	481b      	ldr	r0, [pc, #108]	; (80009ec <display7SEG2+0x390>)
 800097e:	f001 f988 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <display7SEG2+0x390>)
 800098a:	f001 f982 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 800098e:	e029      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 9:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <display7SEG2+0x390>)
 8000996:	f001 f97c 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <display7SEG2+0x390>)
 80009a2:	f001 f976 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <display7SEG2+0x390>)
 80009ae:	f001 f970 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <display7SEG2+0x390>)
 80009ba:	f001 f96a 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <display7SEG2+0x390>)
 80009c6:	f001 f964 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <display7SEG2+0x390>)
 80009d2:	f001 f95e 	bl	8001c92 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <display7SEG2+0x390>)
 80009de:	f001 f958 	bl	8001c92 <HAL_GPIO_WritePin>
  		break;
 80009e2:	bf00      	nop
  		}
  	}
 }
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <display_7SEG_automatic>:

void display_7SEG_automatic()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	switch(automatic_7SEG){
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <display_7SEG_automatic+0xc4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <display_7SEG_automatic+0x12>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d028      	beq.n	8000a52 <display_7SEG_automatic+0x62>
			setTimer3(50);
			automatic_7SEG = E01;
		}
		break;
	default:
		break;
 8000a00:	e056      	b.n	8000ab0 <display_7SEG_automatic+0xc0>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	482c      	ldr	r0, [pc, #176]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a08:	f001 f943 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a14:	f001 f93d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a20:	f001 f937 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a2c:	f001 f931 	bl	8001c92 <HAL_GPIO_WritePin>
		display7SEG1(0);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fc85 	bl	8000340 <display7SEG1>
		display7SEG2(0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fe10 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <display_7SEG_automatic+0xcc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d132      	bne.n	8000aaa <display_7SEG_automatic+0xba>
			setTimer3(50);
 8000a44:	2032      	movs	r0, #50	; 0x32
 8000a46:	f000 fbe9 	bl	800121c <setTimer3>
			automatic_7SEG = E12;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <display_7SEG_automatic+0xc4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
		break;
 8000a50:	e02b      	b.n	8000aaa <display_7SEG_automatic+0xba>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a58:	f001 f91b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a64:	f001 f915 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a70:	f001 f90f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a7c:	f001 f909 	bl	8001c92 <HAL_GPIO_WritePin>
		display7SEG1(countdown1);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <display_7SEG_automatic+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fc5b 	bl	8000340 <display7SEG1>
		display7SEG2(countdown2);
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <display_7SEG_automatic+0xd4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fde4 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <display_7SEG_automatic+0xcc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <display_7SEG_automatic+0xbe>
			setTimer3(50);
 8000a9c:	2032      	movs	r0, #50	; 0x32
 8000a9e:	f000 fbbd 	bl	800121c <setTimer3>
			automatic_7SEG = E01;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <display_7SEG_automatic+0xc4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		break;
 8000aa8:	e001      	b.n	8000aae <display_7SEG_automatic+0xbe>
		break;
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <display_7SEG_automatic+0xc0>
		break;
 8000aae:	bf00      	nop
	}

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	2000004c 	.word	0x2000004c
 8000ac0:	200000b8 	.word	0x200000b8
 8000ac4:	200000bc 	.word	0x200000bc

08000ac8 <display_manual>:

void display_manual(int MODE, int temp){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	switch(automatic_7SEG){
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <display_manual+0xec>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <display_manual+0x18>
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d02f      	beq.n	8000b3e <display_manual+0x76>
			setTimer3(50);
			automatic_7SEG = E01;
		}
		break;
	default:
		break;
 8000ade:	e065      	b.n	8000bac <display_manual+0xe4>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <display_manual+0xf0>)
 8000ae6:	f001 f8d4 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4831      	ldr	r0, [pc, #196]	; (8000bb8 <display_manual+0xf0>)
 8000af2:	f001 f8ce 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	482e      	ldr	r0, [pc, #184]	; (8000bb8 <display_manual+0xf0>)
 8000afe:	f001 f8c8 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b08:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <display_manual+0xf0>)
 8000b0a:	f001 f8c2 	bl	8001c92 <HAL_GPIO_WritePin>
		display7SEG1(temp/10);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <display_manual+0xf4>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1092      	asrs	r2, r2, #2
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fc0f 	bl	8000340 <display7SEG1>
		display7SEG2(0);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fd9a 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <display_manual+0xf8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d13a      	bne.n	8000ba6 <display_manual+0xde>
			setTimer3(50);
 8000b30:	2032      	movs	r0, #50	; 0x32
 8000b32:	f000 fb73 	bl	800121c <setTimer3>
			automatic_7SEG = E12;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <display_manual+0xec>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
		break;
 8000b3c:	e033      	b.n	8000ba6 <display_manual+0xde>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	481d      	ldr	r0, [pc, #116]	; (8000bb8 <display_manual+0xf0>)
 8000b44:	f001 f8a5 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	481a      	ldr	r0, [pc, #104]	; (8000bb8 <display_manual+0xf0>)
 8000b50:	f001 f89f 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <display_manual+0xf0>)
 8000b5c:	f001 f899 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <display_manual+0xf0>)
 8000b68:	f001 f893 	bl	8001c92 <HAL_GPIO_WritePin>
		display7SEG1(temp%10);
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <display_manual+0xf4>)
 8000b70:	fb83 1302 	smull	r1, r3, r3, r2
 8000b74:	1099      	asrs	r1, r3, #2
 8000b76:	17d3      	asrs	r3, r2, #31
 8000b78:	1ac9      	subs	r1, r1, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1ad1      	subs	r1, r2, r3
 8000b84:	4608      	mov	r0, r1
 8000b86:	f7ff fbdb 	bl	8000340 <display7SEG1>
		display7SEG2(MODE);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fd66 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <display_manual+0xf8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d108      	bne.n	8000baa <display_manual+0xe2>
			setTimer3(50);
 8000b98:	2032      	movs	r0, #50	; 0x32
 8000b9a:	f000 fb3f 	bl	800121c <setTimer3>
			automatic_7SEG = E01;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <display_manual+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
		break;
 8000ba4:	e001      	b.n	8000baa <display_manual+0xe2>
		break;
 8000ba6:	bf00      	nop
 8000ba8:	e000      	b.n	8000bac <display_manual+0xe4>
		break;
 8000baa:	bf00      	nop
	}
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000084 	.word	0x20000084
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	66666667 	.word	0x66666667
 8000bc0:	2000004c 	.word	0x2000004c

08000bc4 <fsm_automatic_run>:
#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	switch (status1){
 8000bc8:	4b5a      	ldr	r3, [pc, #360]	; (8000d34 <fsm_automatic_run+0x170>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d852      	bhi.n	8000c78 <fsm_automatic_run+0xb4>
 8000bd2:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <fsm_automatic_run+0x14>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000be9 	.word	0x08000be9
 8000bdc:	08000c07 	.word	0x08000c07
 8000be0:	08000c2d 	.word	0x08000c2d
 8000be4:	08000c53 	.word	0x08000c53
			case INIT:
				setOfLight(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f000 fc63 	bl	80014b4 <setOfLight>
				status1 = AUTO_RED;
 8000bee:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <fsm_automatic_run+0x170>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	601a      	str	r2, [r3, #0]
				setTimer1(red*100);
 8000bf4:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <fsm_automatic_run+0x174>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2264      	movs	r2, #100	; 0x64
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 facc 	bl	800119c <setTimer1>
				break;
 8000c04:	e039      	b.n	8000c7a <fsm_automatic_run+0xb6>
			case AUTO_RED:
				if (timer1_flag==1){
 8000c06:	4b4d      	ldr	r3, [pc, #308]	; (8000d3c <fsm_automatic_run+0x178>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10a      	bne.n	8000c24 <fsm_automatic_run+0x60>
					status1 = AUTO_GREEN;
 8000c0e:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <fsm_automatic_run+0x170>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	601a      	str	r2, [r3, #0]
					setTimer1(green*100);
 8000c14:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <fsm_automatic_run+0x17c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2264      	movs	r2, #100	; 0x64
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fabc 	bl	800119c <setTimer1>
				}
				setLightRed(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fc77 	bl	8001518 <setLightRed>
				break;
 8000c2a:	e026      	b.n	8000c7a <fsm_automatic_run+0xb6>
			case AUTO_GREEN:
				if (timer1_flag==1){
 8000c2c:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <fsm_automatic_run+0x178>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d10a      	bne.n	8000c4a <fsm_automatic_run+0x86>
					status1 = AUTO_YELLOW;
 8000c34:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <fsm_automatic_run+0x170>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	601a      	str	r2, [r3, #0]
					setTimer1(yellow*100);
 8000c3a:	4b42      	ldr	r3, [pc, #264]	; (8000d44 <fsm_automatic_run+0x180>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2264      	movs	r2, #100	; 0x64
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 faa9 	bl	800119c <setTimer1>
				}
				setLightGreen(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 fc96 	bl	800157c <setLightGreen>
				break;
 8000c50:	e013      	b.n	8000c7a <fsm_automatic_run+0xb6>
			case AUTO_YELLOW:
				if (timer1_flag==1){
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <fsm_automatic_run+0x178>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d10a      	bne.n	8000c70 <fsm_automatic_run+0xac>
					status1 = AUTO_RED;
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <fsm_automatic_run+0x170>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	601a      	str	r2, [r3, #0]
					setTimer1(red*100);
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <fsm_automatic_run+0x174>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2264      	movs	r2, #100	; 0x64
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fa96 	bl	800119c <setTimer1>
				}
				setLightYellow(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fcb5 	bl	80015e0 <setLightYellow>
				break;
 8000c76:	e000      	b.n	8000c7a <fsm_automatic_run+0xb6>
			default:
				break;
 8000c78:	bf00      	nop
			}
	switch (status2){
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <fsm_automatic_run+0x184>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d853      	bhi.n	8000d2c <fsm_automatic_run+0x168>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <fsm_automatic_run+0xc8>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000cbb 	.word	0x08000cbb
 8000c94:	08000ce1 	.word	0x08000ce1
 8000c98:	08000d07 	.word	0x08000d07
		case INIT:
			setOfLight(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fc09 	bl	80014b4 <setOfLight>
			status2 = AUTO_RED;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <fsm_automatic_run+0x184>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	601a      	str	r2, [r3, #0]
			setTimer2(red*100);
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <fsm_automatic_run+0x174>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2264      	movs	r2, #100	; 0x64
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fa92 	bl	80011dc <setTimer2>
			break;
 8000cb8:	e039      	b.n	8000d2e <fsm_automatic_run+0x16a>
		case AUTO_RED:
			if (timer2_flag==1){
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <fsm_automatic_run+0x188>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10a      	bne.n	8000cd8 <fsm_automatic_run+0x114>
				status2 = AUTO_GREEN;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <fsm_automatic_run+0x184>)
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	601a      	str	r2, [r3, #0]
				setTimer2(green*100);
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <fsm_automatic_run+0x17c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2264      	movs	r2, #100	; 0x64
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fa82 	bl	80011dc <setTimer2>
			}
			setLightRed(2);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f000 fc1d 	bl	8001518 <setLightRed>
			break;
 8000cde:	e026      	b.n	8000d2e <fsm_automatic_run+0x16a>
		case AUTO_GREEN:
			if (timer2_flag==1){
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <fsm_automatic_run+0x188>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d10a      	bne.n	8000cfe <fsm_automatic_run+0x13a>
				status2 = AUTO_YELLOW;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <fsm_automatic_run+0x184>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	601a      	str	r2, [r3, #0]
				setTimer2(yellow*100);
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <fsm_automatic_run+0x180>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2264      	movs	r2, #100	; 0x64
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fa6f 	bl	80011dc <setTimer2>
			}
			setLightGreen(2);
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f000 fc3c 	bl	800157c <setLightGreen>
			break;
 8000d04:	e013      	b.n	8000d2e <fsm_automatic_run+0x16a>
		case AUTO_YELLOW:
			if (timer2_flag==1){
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <fsm_automatic_run+0x188>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10a      	bne.n	8000d24 <fsm_automatic_run+0x160>
				status2 = AUTO_RED;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <fsm_automatic_run+0x184>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	601a      	str	r2, [r3, #0]
				setTimer2(red*100);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <fsm_automatic_run+0x174>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2264      	movs	r2, #100	; 0x64
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa5c 	bl	80011dc <setTimer2>
			}
			setLightYellow(2);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 fc5b 	bl	80015e0 <setLightYellow>
			break;
 8000d2a:	e000      	b.n	8000d2e <fsm_automatic_run+0x16a>
		default:
			break;
 8000d2c:	bf00      	nop
		}
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000038 	.word	0x20000038
 8000d38:	20000040 	.word	0x20000040
 8000d3c:	200000a8 	.word	0x200000a8
 8000d40:	20000044 	.word	0x20000044
 8000d44:	20000048 	.word	0x20000048
 8000d48:	2000003c 	.word	0x2000003c
 8000d4c:	200000ac 	.word	0x200000ac

08000d50 <fsm_manual_run>:
int MODE = MODE_1;
int tempred=0;
int tempgreen=0;
int tempyellow=0;

void fsm_manual_run(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	switch (MODE){
 8000d54:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <fsm_manual_run+0x1e8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3b0c      	subs	r3, #12
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	f200 80e1 	bhi.w	8000f22 <fsm_manual_run+0x1d2>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <fsm_manual_run+0x18>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000da7 	.word	0x08000da7
 8000d70:	08000e2b 	.word	0x08000e2b
 8000d74:	08000ea7 	.word	0x08000ea7
	case MODE_1:
		fsm_automatic_run();
 8000d78:	f7ff ff24 	bl	8000bc4 <fsm_automatic_run>
		display_7SEG_automatic();
 8000d7c:	f7ff fe38 	bl	80009f0 <display_7SEG_automatic>
		if (isButton1Pressed()){
 8000d80:	f7ff f9e4 	bl	800014c <isButton1Pressed>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 80cd 	beq.w	8000f26 <fsm_manual_run+0x1d6>
			MODE=MODE_2;
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <fsm_manual_run+0x1e8>)
 8000d8e:	220d      	movs	r2, #13
 8000d90:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fb8e 	bl	80014b4 <setOfLight>
			setOfLight(2);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f000 fb8b 	bl	80014b4 <setOfLight>
			delayManual(50);
 8000d9e:	2032      	movs	r0, #50	; 0x32
 8000da0:	f000 fa50 	bl	8001244 <delayManual>
		}
		break;
 8000da4:	e0bf      	b.n	8000f26 <fsm_manual_run+0x1d6>
	case MODE_2:
		if(timer4_flag==1){
 8000da6:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <fsm_manual_run+0x1ec>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10a      	bne.n	8000dc4 <fsm_manual_run+0x74>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000dae:	2102      	movs	r1, #2
 8000db0:	4863      	ldr	r0, [pc, #396]	; (8000f40 <fsm_manual_run+0x1f0>)
 8000db2:	f000 ff86 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000db6:	2110      	movs	r1, #16
 8000db8:	4861      	ldr	r0, [pc, #388]	; (8000f40 <fsm_manual_run+0x1f0>)
 8000dba:	f000 ff82 	bl	8001cc2 <HAL_GPIO_TogglePin>
			delayManual(50);
 8000dbe:	2032      	movs	r0, #50	; 0x32
 8000dc0:	f000 fa40 	bl	8001244 <delayManual>
		}
		if (isButton2Pressed()){
 8000dc4:	f7ff f9d4 	bl	8000170 <isButton2Pressed>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <fsm_manual_run+0x96>
			tempred++;
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <fsm_manual_run+0x1f4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a5b      	ldr	r2, [pc, #364]	; (8000f44 <fsm_manual_run+0x1f4>)
 8000dd6:	6013      	str	r3, [r2, #0]
			if (tempred>99) tempred=0;
 8000dd8:	4b5a      	ldr	r3, [pc, #360]	; (8000f44 <fsm_manual_run+0x1f4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b63      	cmp	r3, #99	; 0x63
 8000dde:	dd02      	ble.n	8000de6 <fsm_manual_run+0x96>
 8000de0:	4b58      	ldr	r3, [pc, #352]	; (8000f44 <fsm_manual_run+0x1f4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed()){
 8000de6:	f7ff f9d5 	bl	8000194 <isButton3Pressed>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <fsm_manual_run+0xa8>
			red=tempred;
 8000df0:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <fsm_manual_run+0x1f4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a54      	ldr	r2, [pc, #336]	; (8000f48 <fsm_manual_run+0x1f8>)
 8000df6:	6013      	str	r3, [r2, #0]
		}
			display_manual(2,tempred);
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <fsm_manual_run+0x1f4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f7ff fe62 	bl	8000ac8 <display_manual>
		if (isButton1Pressed()){
 8000e04:	f7ff f9a2 	bl	800014c <isButton1Pressed>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 808d 	beq.w	8000f2a <fsm_manual_run+0x1da>
			MODE=MODE_3;
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <fsm_manual_run+0x1e8>)
 8000e12:	220e      	movs	r2, #14
 8000e14:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 fb4c 	bl	80014b4 <setOfLight>
			setOfLight(2);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f000 fb49 	bl	80014b4 <setOfLight>
			delayManual(50);
 8000e22:	2032      	movs	r0, #50	; 0x32
 8000e24:	f000 fa0e 	bl	8001244 <delayManual>
		}
		break;
 8000e28:	e07f      	b.n	8000f2a <fsm_manual_run+0x1da>
	case MODE_3:
		if(timer4_flag==1){
 8000e2a:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <fsm_manual_run+0x1ec>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d10a      	bne.n	8000e48 <fsm_manual_run+0xf8>
			HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000e32:	2108      	movs	r1, #8
 8000e34:	4842      	ldr	r0, [pc, #264]	; (8000f40 <fsm_manual_run+0x1f0>)
 8000e36:	f000 ff44 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4840      	ldr	r0, [pc, #256]	; (8000f40 <fsm_manual_run+0x1f0>)
 8000e3e:	f000 ff40 	bl	8001cc2 <HAL_GPIO_TogglePin>
			delayManual(50);
 8000e42:	2032      	movs	r0, #50	; 0x32
 8000e44:	f000 f9fe 	bl	8001244 <delayManual>
		}
		if (isButton2Pressed()){
 8000e48:	f7ff f992 	bl	8000170 <isButton2Pressed>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <fsm_manual_run+0x11a>
			tempgreen++;
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <fsm_manual_run+0x1fc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a3c      	ldr	r2, [pc, #240]	; (8000f4c <fsm_manual_run+0x1fc>)
 8000e5a:	6013      	str	r3, [r2, #0]
			if (tempgreen>99) tempgreen=0;
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <fsm_manual_run+0x1fc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b63      	cmp	r3, #99	; 0x63
 8000e62:	dd02      	ble.n	8000e6a <fsm_manual_run+0x11a>
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <fsm_manual_run+0x1fc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
		}
			if (isButton3Pressed()){
 8000e6a:	f7ff f993 	bl	8000194 <isButton3Pressed>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <fsm_manual_run+0x12c>
			green=tempgreen;
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <fsm_manual_run+0x1fc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a35      	ldr	r2, [pc, #212]	; (8000f50 <fsm_manual_run+0x200>)
 8000e7a:	6013      	str	r3, [r2, #0]
		}
			display_manual(3, tempgreen);
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <fsm_manual_run+0x1fc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	2003      	movs	r0, #3
 8000e84:	f7ff fe20 	bl	8000ac8 <display_manual>
		if (isButton1Pressed()){
 8000e88:	f7ff f960 	bl	800014c <isButton1Pressed>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d04d      	beq.n	8000f2e <fsm_manual_run+0x1de>
			MODE=MODE_4;
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <fsm_manual_run+0x1e8>)
 8000e94:	220f      	movs	r2, #15
 8000e96:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fb0b 	bl	80014b4 <setOfLight>
			setOfLight(2);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f000 fb08 	bl	80014b4 <setOfLight>
		}
		break;
 8000ea4:	e043      	b.n	8000f2e <fsm_manual_run+0x1de>
	case MODE_4:
		if(timer4_flag==1){
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <fsm_manual_run+0x1ec>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d10a      	bne.n	8000ec4 <fsm_manual_run+0x174>
			HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4823      	ldr	r0, [pc, #140]	; (8000f40 <fsm_manual_run+0x1f0>)
 8000eb2:	f000 ff06 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4821      	ldr	r0, [pc, #132]	; (8000f40 <fsm_manual_run+0x1f0>)
 8000eba:	f000 ff02 	bl	8001cc2 <HAL_GPIO_TogglePin>
			delayManual(50);
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f000 f9c0 	bl	8001244 <delayManual>
		}
		if (isButton2Pressed()){
 8000ec4:	f7ff f954 	bl	8000170 <isButton2Pressed>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00b      	beq.n	8000ee6 <fsm_manual_run+0x196>
			tempyellow++;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <fsm_manual_run+0x204>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <fsm_manual_run+0x204>)
 8000ed6:	6013      	str	r3, [r2, #0]
			if (tempyellow>99) tempyellow=0;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <fsm_manual_run+0x204>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b63      	cmp	r3, #99	; 0x63
 8000ede:	dd02      	ble.n	8000ee6 <fsm_manual_run+0x196>
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <fsm_manual_run+0x204>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed()){
 8000ee6:	f7ff f955 	bl	8000194 <isButton3Pressed>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <fsm_manual_run+0x1a8>
			yellow=tempyellow;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <fsm_manual_run+0x204>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <fsm_manual_run+0x208>)
 8000ef6:	6013      	str	r3, [r2, #0]
		}
			display_manual(4,tempyellow);
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <fsm_manual_run+0x204>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	2004      	movs	r0, #4
 8000f00:	f7ff fde2 	bl	8000ac8 <display_manual>
		if (isButton1Pressed()){
 8000f04:	f7ff f922 	bl	800014c <isButton1Pressed>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d011      	beq.n	8000f32 <fsm_manual_run+0x1e2>
			MODE=MODE_1;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <fsm_manual_run+0x1e8>)
 8000f10:	220c      	movs	r2, #12
 8000f12:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 facd 	bl	80014b4 <setOfLight>
			setOfLight(2);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f000 faca 	bl	80014b4 <setOfLight>
		}
		break;
 8000f20:	e007      	b.n	8000f32 <fsm_manual_run+0x1e2>
	default: break;
 8000f22:	bf00      	nop
 8000f24:	e006      	b.n	8000f34 <fsm_manual_run+0x1e4>
		break;
 8000f26:	bf00      	nop
 8000f28:	e004      	b.n	8000f34 <fsm_manual_run+0x1e4>
		break;
 8000f2a:	bf00      	nop
 8000f2c:	e002      	b.n	8000f34 <fsm_manual_run+0x1e4>
		break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <fsm_manual_run+0x1e4>
		break;
 8000f32:	bf00      	nop
	}
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000034 	.word	0x20000034
 8000f3c:	200000b0 	.word	0x200000b0
 8000f40:	40010800 	.word	0x40010800
 8000f44:	20000088 	.word	0x20000088
 8000f48:	20000040 	.word	0x20000040
 8000f4c:	2000008c 	.word	0x2000008c
 8000f50:	20000044 	.word	0x20000044
 8000f54:	20000090 	.word	0x20000090
 8000f58:	20000048 	.word	0x20000048

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fb96 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f81c 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f8a2 	bl	80010b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f6c:	f000 f854 	bl	8001018 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <main+0x38>)
 8000f72:	f001 faeb 	bl	800254c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  status1=AUTO_GREEN;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <main+0x3c>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	601a      	str	r2, [r3, #0]
  status2=AUTO_RED;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <main+0x40>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	601a      	str	r2, [r3, #0]
  setTimer1(50);
 8000f82:	2032      	movs	r0, #50	; 0x32
 8000f84:	f000 f90a 	bl	800119c <setTimer1>
  setTimer2(50);
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f000 f927 	bl	80011dc <setTimer2>
//  SCH_Add_Task(led_yellow, 200, 200);
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 8000f8e:	f7ff fedf 	bl	8000d50 <fsm_manual_run>
 8000f92:	e7fc      	b.n	8000f8e <main+0x32>
 8000f94:	200000c0 	.word	0x200000c0
 8000f98:	20000038 	.word	0x20000038
 8000f9c:	2000003c 	.word	0x2000003c

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	; 0x40
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2228      	movs	r2, #40	; 0x28
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fe7c 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fe8c 	bl	8001cf4 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f8d5 	bl	8001190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 f8f8 	bl	80021f4 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800100a:	f000 f8c1 	bl	8001190 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3740      	adds	r7, #64	; 0x40
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_TIM2_Init+0x94>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_TIM2_Init+0x94>)
 800103e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_TIM2_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_TIM2_Init+0x94>)
 800104c:	2209      	movs	r2, #9
 800104e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM2_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <MX_TIM2_Init+0x94>)
 800105e:	f001 fa25 	bl	80024ac <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001068:	f000 f892 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_TIM2_Init+0x94>)
 800107a:	f001 fba3 	bl	80027c4 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 f884 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_TIM2_Init+0x94>)
 8001096:	f001 fd7b 	bl	8002b90 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010a0:	f000 f876 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000c0 	.word	0x200000c0

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_GPIO_Init+0xbc>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a28      	ldr	r2, [pc, #160]	; (800116c <MX_GPIO_Init+0xbc>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_GPIO_Init+0xbc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_GPIO_Init+0xbc>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a22      	ldr	r2, [pc, #136]	; (800116c <MX_GPIO_Init+0xbc>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <MX_GPIO_Init+0xbc>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|R2_Pin
 80010f4:	2200      	movs	r2, #0
 80010f6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80010fa:	481d      	ldr	r0, [pc, #116]	; (8001170 <MX_GPIO_Init+0xc0>)
 80010fc:	f000 fdc9 	bl	8001c92 <HAL_GPIO_WritePin>
                          |Y2_Pin|G2_Pin|E0_Pin|E1_Pin
                          |E2_Pin|E3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, s0_Pin|s1_Pin|s2_Pin|s10_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001106:	481b      	ldr	r0, [pc, #108]	; (8001174 <MX_GPIO_Init+0xc4>)
 8001108:	f000 fdc3 	bl	8001c92 <HAL_GPIO_WritePin>
                          |s8_Pin|s9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin R2_Pin
                           Y2_Pin G2_Pin E0_Pin E1_Pin
                           E2_Pin E3_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|R2_Pin
 800110c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001110:	60bb      	str	r3, [r7, #8]
                          |Y2_Pin|G2_Pin|E0_Pin|E1_Pin
                          |E2_Pin|E3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <MX_GPIO_Init+0xc0>)
 8001126:	f000 fc23 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : s0_Pin s1_Pin s2_Pin s10_Pin
                           s11_Pin s12_Pin s13_Pin s3_Pin
                           s4_Pin s5_Pin s6_Pin s7_Pin
                           s8_Pin s9_Pin */
  GPIO_InitStruct.Pin = s0_Pin|s1_Pin|s2_Pin|s10_Pin
 800112a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800112e:	60bb      	str	r3, [r7, #8]
                          |s11_Pin|s12_Pin|s13_Pin|s3_Pin
                          |s4_Pin|s5_Pin|s6_Pin|s7_Pin
                          |s8_Pin|s9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_GPIO_Init+0xc4>)
 8001144:	f000 fc14 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001148:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800114c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001152:	2301      	movs	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_GPIO_Init+0xc0>)
 800115e:	f000 fc07 	bl	8001970 <HAL_GPIO_Init>

}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800
 8001174:	40010c00 	.word	0x40010c00

08001178 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	timer_run();
 8001180:	f000 f874 	bl	800126c <timer_run>
	getKeyInput();
 8001184:	f7ff f83c 	bl	8000200 <getKeyInput>
//	SCH_Update();
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x8>
	...

0800119c <setTimer1>:
int timer4_flag = 0;
int timer5_flag = 0;
int countdown1 = 0;
int countdown2 = 0;

void setTimer1 ( int duration ) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <setTimer1+0x30>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
	countdown1=duration/100;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <setTimer1+0x34>)
 80011ae:	fb82 1203 	smull	r1, r2, r2, r3
 80011b2:	1152      	asrs	r2, r2, #5
 80011b4:	17db      	asrs	r3, r3, #31
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <setTimer1+0x38>)
 80011ba:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <setTimer1+0x3c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000094 	.word	0x20000094
 80011d0:	51eb851f 	.word	0x51eb851f
 80011d4:	200000b8 	.word	0x200000b8
 80011d8:	200000a8 	.word	0x200000a8

080011dc <setTimer2>:
void setTimer2 ( int duration ) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <setTimer2+0x30>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
	countdown2=duration/100;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a08      	ldr	r2, [pc, #32]	; (8001210 <setTimer2+0x34>)
 80011ee:	fb82 1203 	smull	r1, r2, r2, r3
 80011f2:	1152      	asrs	r2, r2, #5
 80011f4:	17db      	asrs	r3, r3, #31
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <setTimer2+0x38>)
 80011fa:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <setTimer2+0x3c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000098 	.word	0x20000098
 8001210:	51eb851f 	.word	0x51eb851f
 8001214:	200000bc 	.word	0x200000bc
 8001218:	200000ac 	.word	0x200000ac

0800121c <setTimer3>:
void setTimer3 ( int duration ) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <setTimer3+0x20>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <setTimer3+0x24>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000009c 	.word	0x2000009c
 8001240:	2000004c 	.word	0x2000004c

08001244 <delayManual>:
void delayManual ( int duration ) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <delayManual+0x20>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <delayManual+0x24>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000a0 	.word	0x200000a0
 8001268:	200000b0 	.word	0x200000b0

0800126c <timer_run>:
void timer_Count ( int duration ) {
	timer5_counter = duration;
	timer5_flag = 0;
}
void timer_run () {
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	if( timer1_counter > 0) {
 8001270:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <timer_run+0xf8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd1e      	ble.n	80012b6 <timer_run+0x4a>
		timer1_counter --;
 8001278:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <timer_run+0xf8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	4a39      	ldr	r2, [pc, #228]	; (8001364 <timer_run+0xf8>)
 8001280:	6013      	str	r3, [r2, #0]
		if(timer1_counter%100==0)
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <timer_run+0xf8>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <timer_run+0xfc>)
 8001288:	fb83 1302 	smull	r1, r3, r3, r2
 800128c:	1159      	asrs	r1, r3, #5
 800128e:	17d3      	asrs	r3, r2, #31
 8001290:	1acb      	subs	r3, r1, r3
 8001292:	2164      	movs	r1, #100	; 0x64
 8001294:	fb01 f303 	mul.w	r3, r1, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <timer_run+0x3c>
			countdown1--;
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <timer_run+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	4a31      	ldr	r2, [pc, #196]	; (800136c <timer_run+0x100>)
 80012a6:	6013      	str	r3, [r2, #0]
		if( timer1_counter == 0)
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <timer_run+0xf8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <timer_run+0x4a>
			timer1_flag = 1;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <timer_run+0x104>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
	}
	if( timer2_counter > 0) {
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <timer_run+0x108>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dd1e      	ble.n	80012fc <timer_run+0x90>
		timer2_counter --;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <timer_run+0x108>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <timer_run+0x108>)
 80012c6:	6013      	str	r3, [r2, #0]
		if(timer2_counter%100==0)
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <timer_run+0x108>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <timer_run+0xfc>)
 80012ce:	fb83 1302 	smull	r1, r3, r3, r2
 80012d2:	1159      	asrs	r1, r3, #5
 80012d4:	17d3      	asrs	r3, r2, #31
 80012d6:	1acb      	subs	r3, r1, r3
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d104      	bne.n	80012ee <timer_run+0x82>
			countdown2--;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <timer_run+0x10c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a23      	ldr	r2, [pc, #140]	; (8001378 <timer_run+0x10c>)
 80012ec:	6013      	str	r3, [r2, #0]
		if( timer2_counter == 0)
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <timer_run+0x108>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <timer_run+0x90>
			timer2_flag = 1;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <timer_run+0x110>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
		}
	if( timer3_counter > 0) {
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <timer_run+0x114>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd0b      	ble.n	800131c <timer_run+0xb0>
		timer3_counter --;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <timer_run+0x114>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <timer_run+0x114>)
 800130c:	6013      	str	r3, [r2, #0]
		if( timer3_counter == 0)
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <timer_run+0x114>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <timer_run+0xb0>
			timer3_flag = 1;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <timer_run+0x118>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
		}
	if( timer4_counter > 0) {
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <timer_run+0x11c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd0b      	ble.n	800133c <timer_run+0xd0>
		timer4_counter --;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <timer_run+0x11c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <timer_run+0x11c>)
 800132c:	6013      	str	r3, [r2, #0]
		if( timer4_counter == 0)
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <timer_run+0x11c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <timer_run+0xd0>
			timer4_flag = 1;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <timer_run+0x120>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]
		}
	if( timer5_counter > 0) {
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <timer_run+0x124>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	dd0b      	ble.n	800135c <timer_run+0xf0>
		timer5_counter --;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <timer_run+0x124>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <timer_run+0x124>)
 800134c:	6013      	str	r3, [r2, #0]
		if( timer5_counter == 0)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <timer_run+0x124>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <timer_run+0xf0>
			timer5_flag = 1;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <timer_run+0x128>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
		}
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000094 	.word	0x20000094
 8001368:	51eb851f 	.word	0x51eb851f
 800136c:	200000b8 	.word	0x200000b8
 8001370:	200000a8 	.word	0x200000a8
 8001374:	20000098 	.word	0x20000098
 8001378:	200000bc 	.word	0x200000bc
 800137c:	200000ac 	.word	0x200000ac
 8001380:	2000009c 	.word	0x2000009c
 8001384:	2000004c 	.word	0x2000004c
 8001388:	200000a0 	.word	0x200000a0
 800138c:	200000b0 	.word	0x200000b0
 8001390:	200000a4 	.word	0x200000a4
 8001394:	200000b4 	.word	0x200000b4

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_MspInit+0x5c>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_MspInit+0x5c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_MspInit+0x5c>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x5c>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x5c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x5c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_MspInit+0x60>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_MspInit+0x60>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000

080013fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d113      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201c      	movs	r0, #28
 800142c:	f000 fa69 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001430:	201c      	movs	r0, #28
 8001432:	f000 fa82 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 f947 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM2_IRQHandler+0x10>)
 800149a:	f001 f8a3 	bl	80025e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000c0 	.word	0x200000c0

080014a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <setOfLight>:
#include <traffic_light.h>

void setOfLight(int lane){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	switch (lane){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d003      	beq.n	80014ca <setOfLight+0x16>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d010      	beq.n	80014ea <setOfLight+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
		break;
	}
}
 80014c8:	e01f      	b.n	800150a <setOfLight+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2102      	movs	r1, #2
 80014ce:	4811      	ldr	r0, [pc, #68]	; (8001514 <setOfLight+0x60>)
 80014d0:	f000 fbdf 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2108      	movs	r1, #8
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <setOfLight+0x60>)
 80014da:	f000 fbda 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2104      	movs	r1, #4
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <setOfLight+0x60>)
 80014e4:	f000 fbd5 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 80014e8:	e00f      	b.n	800150a <setOfLight+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2110      	movs	r1, #16
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <setOfLight+0x60>)
 80014f0:	f000 fbcf 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <setOfLight+0x60>)
 80014fa:	f000 fbca 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2120      	movs	r1, #32
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <setOfLight+0x60>)
 8001504:	f000 fbc5 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 8001508:	bf00      	nop
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010800 	.word	0x40010800

08001518 <setLightRed>:

void setLightRed(int lane){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	switch (lane){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d003      	beq.n	800152e <setLightRed+0x16>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d010      	beq.n	800154e <setLightRed+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
		break;
	}
}
 800152c:	e01f      	b.n	800156e <setLightRed+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2102      	movs	r1, #2
 8001532:	4811      	ldr	r0, [pc, #68]	; (8001578 <setLightRed+0x60>)
 8001534:	f000 fbad 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2108      	movs	r1, #8
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <setLightRed+0x60>)
 800153e:	f000 fba8 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2104      	movs	r1, #4
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <setLightRed+0x60>)
 8001548:	f000 fba3 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 800154c:	e00f      	b.n	800156e <setLightRed+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2110      	movs	r1, #16
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <setLightRed+0x60>)
 8001554:	f000 fb9d 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <setLightRed+0x60>)
 800155e:	f000 fb98 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2120      	movs	r1, #32
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <setLightRed+0x60>)
 8001568:	f000 fb93 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 800156c:	bf00      	nop
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40010800 	.word	0x40010800

0800157c <setLightGreen>:
void setLightGreen(int lane){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	switch(lane){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d003      	beq.n	8001592 <setLightGreen+0x16>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d010      	beq.n	80015b2 <setLightGreen+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
		break;
	}
}
 8001590:	e01f      	b.n	80015d2 <setLightGreen+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2102      	movs	r1, #2
 8001596:	4811      	ldr	r0, [pc, #68]	; (80015dc <setLightGreen+0x60>)
 8001598:	f000 fb7b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2108      	movs	r1, #8
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <setLightGreen+0x60>)
 80015a2:	f000 fb76 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2104      	movs	r1, #4
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <setLightGreen+0x60>)
 80015ac:	f000 fb71 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 80015b0:	e00f      	b.n	80015d2 <setLightGreen+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2110      	movs	r1, #16
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <setLightGreen+0x60>)
 80015b8:	f000 fb6b 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <setLightGreen+0x60>)
 80015c2:	f000 fb66 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2120      	movs	r1, #32
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <setLightGreen+0x60>)
 80015cc:	f000 fb61 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 80015d0:	bf00      	nop
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40010800 	.word	0x40010800

080015e0 <setLightYellow>:
void setLightYellow(int lane){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	switch(lane){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d003      	beq.n	80015f6 <setLightYellow+0x16>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d010      	beq.n	8001616 <setLightYellow+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
		break;
	}
}
 80015f4:	e01f      	b.n	8001636 <setLightYellow+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2102      	movs	r1, #2
 80015fa:	4811      	ldr	r0, [pc, #68]	; (8001640 <setLightYellow+0x60>)
 80015fc:	f000 fb49 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2108      	movs	r1, #8
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <setLightYellow+0x60>)
 8001606:	f000 fb44 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2104      	movs	r1, #4
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <setLightYellow+0x60>)
 8001610:	f000 fb3f 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 8001614:	e00f      	b.n	8001636 <setLightYellow+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2110      	movs	r1, #16
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <setLightYellow+0x60>)
 800161c:	f000 fb39 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <setLightYellow+0x60>)
 8001626:	f000 fb34 	bl	8001c92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2120      	movs	r1, #32
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <setLightYellow+0x60>)
 8001630:	f000 fb2f 	bl	8001c92 <HAL_GPIO_WritePin>
		break;
 8001634:	bf00      	nop
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40010800 	.word	0x40010800

08001644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001644:	f7ff ff30 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800164a:	490c      	ldr	r1, [pc, #48]	; (800167c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001660:	4c09      	ldr	r4, [pc, #36]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f001 faf9 	bl	8002c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001672:	f7ff fc73 	bl	8000f5c <main>
  bx lr
 8001676:	4770      	bx	lr
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001680:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 8001684:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001688:	2000010c 	.word	0x2000010c

0800168c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC1_2_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_Init+0x28>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_Init+0x28>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 f923 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f808 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ac:	f7ff fe74 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f93b 	bl	8001956 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f903 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000050 	.word	0x20000050
 8001714:	20000058 	.word	0x20000058
 8001718:	20000054 	.word	0x20000054

0800171c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x1c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x20>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_IncTick+0x20>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000058 	.word	0x20000058
 800173c:	20000108 	.word	0x20000108

08001740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <HAL_GetTick+0x10>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	20000108 	.word	0x20000108

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4906      	ldr	r1, [pc, #24]	; (80017ec <__NVIC_EnableIRQ+0x34>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff90 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff2d 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff42 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff90 	bl	8001844 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5f 	bl	80017f0 <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff35 	bl	80017b8 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e148      	b.n	8001c16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001984:	2201      	movs	r2, #1
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8137 	bne.w	8001c10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4aa3      	ldr	r2, [pc, #652]	; (8001c34 <HAL_GPIO_Init+0x2c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d05e      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019ac:	4aa1      	ldr	r2, [pc, #644]	; (8001c34 <HAL_GPIO_Init+0x2c4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d875      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019b2:	4aa1      	ldr	r2, [pc, #644]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d058      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019b8:	4a9f      	ldr	r2, [pc, #636]	; (8001c38 <HAL_GPIO_Init+0x2c8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d86f      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019be:	4a9f      	ldr	r2, [pc, #636]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d052      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019c4:	4a9d      	ldr	r2, [pc, #628]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d869      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ca:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <HAL_GPIO_Init+0x2d0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04c      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019d0:	4a9b      	ldr	r2, [pc, #620]	; (8001c40 <HAL_GPIO_Init+0x2d0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d863      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019d6:	4a9b      	ldr	r2, [pc, #620]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d046      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019dc:	4a99      	ldr	r2, [pc, #612]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d85d      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d82a      	bhi.n	8001a3c <HAL_GPIO_Init+0xcc>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d859      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_GPIO_Init+0x80>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a45 	.word	0x08001a45
 80019f8:	08001a57 	.word	0x08001a57
 80019fc:	08001a99 	.word	0x08001a99
 8001a00:	08001a9f 	.word	0x08001a9f
 8001a04:	08001a9f 	.word	0x08001a9f
 8001a08:	08001a9f 	.word	0x08001a9f
 8001a0c:	08001a9f 	.word	0x08001a9f
 8001a10:	08001a9f 	.word	0x08001a9f
 8001a14:	08001a9f 	.word	0x08001a9f
 8001a18:	08001a9f 	.word	0x08001a9f
 8001a1c:	08001a9f 	.word	0x08001a9f
 8001a20:	08001a9f 	.word	0x08001a9f
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a9f 	.word	0x08001a9f
 8001a2c:	08001a9f 	.word	0x08001a9f
 8001a30:	08001a9f 	.word	0x08001a9f
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a61 	.word	0x08001a61
 8001a3c:	4a82      	ldr	r2, [pc, #520]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a42:	e02c      	b.n	8001a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e029      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	3304      	adds	r3, #4
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e024      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e01f      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e01a      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a72:	2304      	movs	r3, #4
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e013      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	611a      	str	r2, [r3, #16]
          break;
 8001a8a:	e009      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	615a      	str	r2, [r3, #20]
          break;
 8001a96:	e003      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
          break;
 8001a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d801      	bhi.n	8001aaa <HAL_GPIO_Init+0x13a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_Init+0x13e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3304      	adds	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d802      	bhi.n	8001abc <HAL_GPIO_Init+0x14c>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x152>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	210f      	movs	r1, #15
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8090 	beq.w	8001c10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b08:	4a51      	ldr	r2, [pc, #324]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_GPIO_Init+0x1e0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_GPIO_Init+0x1dc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_GPIO_Init+0x1d8>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b62:	493b      	ldr	r1, [pc, #236]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4937      	ldr	r1, [pc, #220]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4933      	ldr	r1, [pc, #204]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	492d      	ldr	r1, [pc, #180]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4929      	ldr	r1, [pc, #164]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4923      	ldr	r1, [pc, #140]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	491f      	ldr	r1, [pc, #124]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4919      	ldr	r1, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4915      	ldr	r1, [pc, #84]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f aeaf 	bne.w	8001984 <HAL_GPIO_Init+0x14>
  }
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	372c      	adds	r7, #44	; 0x2c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	10320000 	.word	0x10320000
 8001c38:	10310000 	.word	0x10310000
 8001c3c:	10220000 	.word	0x10220000
 8001c40:	10210000 	.word	0x10210000
 8001c44:	10120000 	.word	0x10120000
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca2:	787b      	ldrb	r3, [r7, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cae:	e003      	b.n	8001cb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	041a      	lsls	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	611a      	str	r2, [r3, #16]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd4:	887a      	ldrh	r2, [r7, #2]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	611a      	str	r2, [r3, #16]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e26c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d14:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d20:	4b8f      	ldr	r3, [pc, #572]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e>
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d06c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x12c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d168      	bne.n	8001e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e246      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x76>
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0xbc>
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a71      	ldr	r2, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6e      	ldr	r2, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001db0:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fcb6 	bl	8001740 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcb2 	bl	8001740 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1fa      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe4>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fca2 	bl	8001740 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fc9e 	bl	8001740 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1e6      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x10c>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x18c>
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x176>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1ba      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4939      	ldr	r1, [pc, #228]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e03a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fc57 	bl	8001740 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fc53 	bl	8001740 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e19b      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc36 	bl	8001740 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc32 	bl	8001740 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e17a      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d03a      	beq.n	8001f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d019      	beq.n	8001f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff fc16 	bl	8001740 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc12 	bl	8001740 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e15a      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f000 fa9a 	bl	8002470 <RCC_Delay>
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_OscConfig+0x274>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7ff fbfc 	bl	8001740 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4a:	e00f      	b.n	8001f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fbf8 	bl	8001740 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d908      	bls.n	8001f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e140      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	42420000 	.word	0x42420000
 8001f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b9e      	ldr	r3, [pc, #632]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e9      	bne.n	8001f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a6 	beq.w	80020d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b97      	ldr	r3, [pc, #604]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b94      	ldr	r3, [pc, #592]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a93      	ldr	r2, [pc, #588]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b91      	ldr	r3, [pc, #580]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fbe:	4b8b      	ldr	r3, [pc, #556]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a8a      	ldr	r2, [pc, #552]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fbb9 	bl	8001740 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff fbb5 	bl	8001740 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0fd      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b81      	ldr	r3, [pc, #516]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x312>
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e02d      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x334>
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a75      	ldr	r2, [pc, #468]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	e01c      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d10c      	bne.n	800204a <HAL_RCC_OscConfig+0x356>
 8002030:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a6c      	ldr	r2, [pc, #432]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d015      	beq.n	8002096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb69 	bl	8001740 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff fb65 	bl	8001740 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0ab      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ee      	beq.n	8002072 <HAL_RCC_OscConfig+0x37e>
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fb53 	bl	8001740 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fb4f 	bl	8001740 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e095      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a47      	ldr	r2, [pc, #284]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8081 	beq.w	80021de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020dc:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d061      	beq.n	80021ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d146      	bne.n	800217e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff fb23 	bl	8001740 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff fb1f 	bl	8001740 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e067      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	492d      	ldr	r1, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a19      	ldr	r1, [r3, #32]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	430b      	orrs	r3, r1
 800214a:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff faf3 	bl	8001740 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff faef 	bl	8001740 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e037      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x46a>
 800217c:	e02f      	b.n	80021de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fadc 	bl	8001740 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff fad8 	bl	8001740 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e020      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x498>
 80021aa:	e018      	b.n	80021de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e013      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420060 	.word	0x42420060

080021f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d0      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4965      	ldr	r1, [pc, #404]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b8      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002250:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a58      	ldr	r2, [pc, #352]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	494d      	ldr	r1, [pc, #308]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d040      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07f      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e073      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4936      	ldr	r1, [pc, #216]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7ff fa2c 	bl	8001740 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff fa28 	bl	8001740 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e053      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d210      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4922      	ldr	r1, [pc, #136]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e032      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002382:	f000 f821 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1cc>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1d0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f98a 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08002cd4 	.word	0x08002cd4
 80023c0:	20000050 	.word	0x20000050
 80023c4:	20000054 	.word	0x20000054

080023c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_GetSysClockFreq+0x94>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x30>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x36>
 80023f6:	e027      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fa:	613b      	str	r3, [r7, #16]
      break;
 80023fc:	e027      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_GetSysClockFreq+0x94>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0c5b      	lsrs	r3, r3, #17
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 800242a:	fb02 f203 	mul.w	r2, r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e004      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_RCC_GetSysClockFreq+0xa4>)
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	613b      	str	r3, [r7, #16]
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 800244a:	613b      	str	r3, [r7, #16]
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	693b      	ldr	r3, [r7, #16]
}
 8002450:	4618      	mov	r0, r3
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	007a1200 	.word	0x007a1200
 8002464:	08002ce4 	.word	0x08002ce4
 8002468:	08002cf4 	.word	0x08002cf4
 800246c:	003d0900 	.word	0x003d0900

08002470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <RCC_Delay+0x34>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <RCC_Delay+0x38>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0a5b      	lsrs	r3, r3, #9
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800248c:	bf00      	nop
  }
  while (Delay --);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	60fa      	str	r2, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f9      	bne.n	800248c <RCC_Delay+0x1c>
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	20000050 	.word	0x20000050
 80024a8:	10624dd3 	.word	0x10624dd3

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe ff92 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 fa56 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e035      	b.n	80025d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <HAL_TIM_Base_Start_IT+0x90>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x4e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d004      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x4e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d111      	bne.n	80025be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b06      	cmp	r3, #6
 80025aa:	d010      	beq.n	80025ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025bc:	e007      	b.n	80025ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40000400 	.word	0x40000400

080025e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0202 	mvn.w	r2, #2
 8002618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f998 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f98b 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f99a 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0204 	mvn.w	r2, #4
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f972 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f965 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f974 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d020      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0208 	mvn.w	r2, #8
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2204      	movs	r2, #4
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f94c 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f93f 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f94e 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d020      	beq.n	800272c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01b      	beq.n	800272c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0210 	mvn.w	r2, #16
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2208      	movs	r2, #8
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f926 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f919 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f928 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0201 	mvn.w	r2, #1
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fd14 	bl	8001178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa6f 	bl	8002c52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8f8 	bl	8002988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0220 	mvn.w	r2, #32
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa42 	bl	8002c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_ConfigClockSource+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0b4      	b.n	800294a <HAL_TIM_ConfigClockSource+0x186>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d03e      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0xd4>
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	f200 8087 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	f000 8086 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x172>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d87f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d01a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0xa6>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d87b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d050      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x11a>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d877      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d03c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xfa>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d873      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d058      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x13a>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d86f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d064      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d86b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d060      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d867      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d05a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	e062      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f000 f96a 	bl	8002b52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800288c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
      break;
 8002896:	e04f      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f000 f953 	bl	8002b52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ba:	609a      	str	r2, [r3, #8]
      break;
 80028bc:	e03c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f8ca 	bl	8002a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2150      	movs	r1, #80	; 0x50
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f921 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028dc:	e02c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f8e8 	bl	8002ac0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2160      	movs	r1, #96	; 0x60
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f911 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028fc:	e01c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f8aa 	bl	8002a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f901 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 800291c:	e00c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f8f8 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 800292e:	e003      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e000      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x28>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x28>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <TIM_Base_SetConfig+0xc4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <TIM_Base_SetConfig+0x52>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d003      	beq.n	80029ee <TIM_Base_SetConfig+0x52>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <TIM_Base_SetConfig+0xc4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f023 0201 	bic.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]
  }
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400

08002a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 0201 	bic.w	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 030a 	bic.w	r3, r3, #10
 8002aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	621a      	str	r2, [r3, #32]
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0210 	bic.w	r2, r3, #16
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	031b      	lsls	r3, r3, #12
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	621a      	str	r2, [r3, #32]
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f043 0307 	orr.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b087      	sub	sp, #28
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	021a      	lsls	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	609a      	str	r2, [r3, #8]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e041      	b.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10c      	bne.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400

08002c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <__libc_init_array>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	2600      	movs	r6, #0
 8002c68:	4d0c      	ldr	r5, [pc, #48]	; (8002c9c <__libc_init_array+0x38>)
 8002c6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ca0 <__libc_init_array+0x3c>)
 8002c6c:	1b64      	subs	r4, r4, r5
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	42a6      	cmp	r6, r4
 8002c72:	d109      	bne.n	8002c88 <__libc_init_array+0x24>
 8002c74:	f000 f822 	bl	8002cbc <_init>
 8002c78:	2600      	movs	r6, #0
 8002c7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ca4 <__libc_init_array+0x40>)
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <__libc_init_array+0x44>)
 8002c7e:	1b64      	subs	r4, r4, r5
 8002c80:	10a4      	asrs	r4, r4, #2
 8002c82:	42a6      	cmp	r6, r4
 8002c84:	d105      	bne.n	8002c92 <__libc_init_array+0x2e>
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8c:	4798      	blx	r3
 8002c8e:	3601      	adds	r6, #1
 8002c90:	e7ee      	b.n	8002c70 <__libc_init_array+0xc>
 8002c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c96:	4798      	blx	r3
 8002c98:	3601      	adds	r6, #1
 8002c9a:	e7f2      	b.n	8002c82 <__libc_init_array+0x1e>
 8002c9c:	08002cf8 	.word	0x08002cf8
 8002ca0:	08002cf8 	.word	0x08002cf8
 8002ca4:	08002cf8 	.word	0x08002cf8
 8002ca8:	08002cfc 	.word	0x08002cfc

08002cac <memset>:
 8002cac:	4603      	mov	r3, r0
 8002cae:	4402      	add	r2, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr

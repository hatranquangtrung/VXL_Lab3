
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce8  08002ce8  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce8  08002ce8  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce8  08002ce8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000050  08002d40  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002d40  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099c4  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c61  00000000  00000000  00029a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017143  00000000  00000000  0002ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e615  00000000  00000000  00043bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008254c  00000000  00000000  000521d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002910  00000000  00000000  000d4778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cac 	.word	0x08002cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002cac 	.word	0x08002cac

0800014c <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;


int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000006c 	.word	0x2000006c

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000070 	.word	0x20000070

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000074 	.word	0x20000074

080001b8 <subKeyProcess>:
void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if(i==0){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d103      	bne.n	80001ce <subKeyProcess+0x16>
	button1_flag = 1;
 80001c6:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <subKeyProcess+0x3c>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
		button2_flag = 1;
	}
	else if(i == 2){
		button3_flag = 1;
	}
}
 80001cc:	e00c      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i==1){
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d103      	bne.n	80001dc <subKeyProcess+0x24>
		button2_flag = 1;
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <subKeyProcess+0x40>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	e005      	b.n	80001e8 <subKeyProcess+0x30>
	else if(i == 2){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d102      	bne.n	80001e8 <subKeyProcess+0x30>
		button3_flag = 1;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <subKeyProcess+0x44>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	2000006c 	.word	0x2000006c
 80001f8:	20000070 	.word	0x20000070
 80001fc:	20000074 	.word	0x20000074

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
  for(int i=0;i<3;i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e084      	b.n	8000316 <getKeyInput+0x116>
	  KeyReg0[i] = KeyReg1[i];
 800020c:	4a46      	ldr	r2, [pc, #280]	; (8000328 <getKeyInput+0x128>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4945      	ldr	r1, [pc, #276]	; (800032c <getKeyInput+0x12c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 800021c:	4a44      	ldr	r2, [pc, #272]	; (8000330 <getKeyInput+0x130>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4940      	ldr	r1, [pc, #256]	; (8000328 <getKeyInput+0x128>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  switch(i){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b02      	cmp	r3, #2
 8000230:	d021      	beq.n	8000276 <getKeyInput+0x76>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b02      	cmp	r3, #2
 8000236:	dc2a      	bgt.n	800028e <getKeyInput+0x8e>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d003      	beq.n	8000246 <getKeyInput+0x46>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d00c      	beq.n	800025e <getKeyInput+0x5e>
 8000244:	e023      	b.n	800028e <getKeyInput+0x8e>
	  case 0:
		  KeyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024a:	483a      	ldr	r0, [pc, #232]	; (8000334 <getKeyInput+0x134>)
 800024c:	f001 fd1a 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	4619      	mov	r1, r3
 8000254:	4a36      	ldr	r2, [pc, #216]	; (8000330 <getKeyInput+0x130>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  break;
 800025c:	e017      	b.n	800028e <getKeyInput+0x8e>
	  case 1:
		  KeyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 800025e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000262:	4834      	ldr	r0, [pc, #208]	; (8000334 <getKeyInput+0x134>)
 8000264:	f001 fd0e 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	4619      	mov	r1, r3
 800026c:	4a30      	ldr	r2, [pc, #192]	; (8000330 <getKeyInput+0x130>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  break;
 8000274:	e00b      	b.n	800028e <getKeyInput+0x8e>
	  case 2:
		  KeyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	482e      	ldr	r0, [pc, #184]	; (8000334 <getKeyInput+0x134>)
 800027c:	f001 fd02 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	4619      	mov	r1, r3
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <getKeyInput+0x130>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  break;
 800028c:	bf00      	nop
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800028e:	4a26      	ldr	r2, [pc, #152]	; (8000328 <getKeyInput+0x128>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000296:	4925      	ldr	r1, [pc, #148]	; (800032c <getKeyInput+0x12c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d136      	bne.n	8000310 <getKeyInput+0x110>
 80002a2:	4a21      	ldr	r2, [pc, #132]	; (8000328 <getKeyInput+0x128>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002aa:	4921      	ldr	r1, [pc, #132]	; (8000330 <getKeyInput+0x130>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d12c      	bne.n	8000310 <getKeyInput+0x110>
		  if (KeyReg2[i] != KeyReg3[i]){
 80002b6:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <getKeyInput+0x130>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	491e      	ldr	r1, [pc, #120]	; (8000338 <getKeyInput+0x138>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d014      	beq.n	80002f4 <getKeyInput+0xf4>
			  KeyReg3[i] = KeyReg2[i];
 80002ca:	4a19      	ldr	r2, [pc, #100]	; (8000330 <getKeyInput+0x130>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d2:	4919      	ldr	r1, [pc, #100]	; (8000338 <getKeyInput+0x138>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 80002da:	4a15      	ldr	r2, [pc, #84]	; (8000330 <getKeyInput+0x130>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d114      	bne.n	8000310 <getKeyInput+0x110>
				TimeOutForKeyPress = 100;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <getKeyInput+0x13c>)
 80002e8:	2264      	movs	r2, #100	; 0x64
 80002ea:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff63 	bl	80001b8 <subKeyProcess>
 80002f2:	e00d      	b.n	8000310 <getKeyInput+0x110>
			  }
		}else{
		   TimeOutForKeyPress --;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <getKeyInput+0x13c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	4a10      	ldr	r2, [pc, #64]	; (800033c <getKeyInput+0x13c>)
 80002fc:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0){
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <getKeyInput+0x13c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d104      	bne.n	8000310 <getKeyInput+0x110>
			  KeyReg3[i] = NORMAL_STATE;
 8000306:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <getKeyInput+0x138>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2101      	movs	r1, #1
 800030c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<3;i++){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b02      	cmp	r3, #2
 800031a:	f77f af77 	ble.w	800020c <getKeyInput+0xc>
			}
		}
	  }
	}
}
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	2000000c 	.word	0x2000000c
 800032c:	20000000 	.word	0x20000000
 8000330:	20000018 	.word	0x20000018
 8000334:	40010800 	.word	0x40010800
 8000338:	20000024 	.word	0x20000024
 800033c:	20000030 	.word	0x20000030

08000340 <display7SEG1>:
#include"display.h"
int automatic_7SEG = E01;
void display7SEG1 (int counter){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b09      	cmp	r3, #9
 800034c:	f200 8180 	bhi.w	8000650 <display7SEG1+0x310>
 8000350:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <display7SEG1+0x18>)
 8000352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000356:	bf00      	nop
 8000358:	08000381 	.word	0x08000381
 800035c:	080003c9 	.word	0x080003c9
 8000360:	08000411 	.word	0x08000411
 8000364:	08000459 	.word	0x08000459
 8000368:	080004a1 	.word	0x080004a1
 800036c:	080004e9 	.word	0x080004e9
 8000370:	08000531 	.word	0x08000531
 8000374:	08000579 	.word	0x08000579
 8000378:	080005c1 	.word	0x080005c1
 800037c:	08000609 	.word	0x08000609
  	switch(counter){
  	case 0:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	48b4      	ldr	r0, [pc, #720]	; (8000658 <display7SEG1+0x318>)
 8000386:	f001 fc94 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2102      	movs	r1, #2
 800038e:	48b2      	ldr	r0, [pc, #712]	; (8000658 <display7SEG1+0x318>)
 8000390:	f001 fc8f 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2104      	movs	r1, #4
 8000398:	48af      	ldr	r0, [pc, #700]	; (8000658 <display7SEG1+0x318>)
 800039a:	f001 fc8a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2108      	movs	r1, #8
 80003a2:	48ad      	ldr	r0, [pc, #692]	; (8000658 <display7SEG1+0x318>)
 80003a4:	f001 fc85 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	48aa      	ldr	r0, [pc, #680]	; (8000658 <display7SEG1+0x318>)
 80003ae:	f001 fc80 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2120      	movs	r1, #32
 80003b6:	48a8      	ldr	r0, [pc, #672]	; (8000658 <display7SEG1+0x318>)
 80003b8:	f001 fc7b 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	48a5      	ldr	r0, [pc, #660]	; (8000658 <display7SEG1+0x318>)
 80003c2:	f001 fc76 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80003c6:	e143      	b.n	8000650 <display7SEG1+0x310>
  			}
  	case 1:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	48a2      	ldr	r0, [pc, #648]	; (8000658 <display7SEG1+0x318>)
 80003ce:	f001 fc70 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2102      	movs	r1, #2
 80003d6:	48a0      	ldr	r0, [pc, #640]	; (8000658 <display7SEG1+0x318>)
 80003d8:	f001 fc6b 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	489d      	ldr	r0, [pc, #628]	; (8000658 <display7SEG1+0x318>)
 80003e2:	f001 fc66 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2108      	movs	r1, #8
 80003ea:	489b      	ldr	r0, [pc, #620]	; (8000658 <display7SEG1+0x318>)
 80003ec:	f001 fc61 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2110      	movs	r1, #16
 80003f4:	4898      	ldr	r0, [pc, #608]	; (8000658 <display7SEG1+0x318>)
 80003f6:	f001 fc5c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	4896      	ldr	r0, [pc, #600]	; (8000658 <display7SEG1+0x318>)
 8000400:	f001 fc57 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	4893      	ldr	r0, [pc, #588]	; (8000658 <display7SEG1+0x318>)
 800040a:	f001 fc52 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800040e:	e11f      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 2:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4890      	ldr	r0, [pc, #576]	; (8000658 <display7SEG1+0x318>)
 8000416:	f001 fc4c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	488e      	ldr	r0, [pc, #568]	; (8000658 <display7SEG1+0x318>)
 8000420:	f001 fc47 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2104      	movs	r1, #4
 8000428:	488b      	ldr	r0, [pc, #556]	; (8000658 <display7SEG1+0x318>)
 800042a:	f001 fc42 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	4889      	ldr	r0, [pc, #548]	; (8000658 <display7SEG1+0x318>)
 8000434:	f001 fc3d 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2110      	movs	r1, #16
 800043c:	4886      	ldr	r0, [pc, #536]	; (8000658 <display7SEG1+0x318>)
 800043e:	f001 fc38 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2120      	movs	r1, #32
 8000446:	4884      	ldr	r0, [pc, #528]	; (8000658 <display7SEG1+0x318>)
 8000448:	f001 fc33 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2140      	movs	r1, #64	; 0x40
 8000450:	4881      	ldr	r0, [pc, #516]	; (8000658 <display7SEG1+0x318>)
 8000452:	f001 fc2e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 8000456:	e0fb      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 3:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2101      	movs	r1, #1
 800045c:	487e      	ldr	r0, [pc, #504]	; (8000658 <display7SEG1+0x318>)
 800045e:	f001 fc28 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2102      	movs	r1, #2
 8000466:	487c      	ldr	r0, [pc, #496]	; (8000658 <display7SEG1+0x318>)
 8000468:	f001 fc23 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2104      	movs	r1, #4
 8000470:	4879      	ldr	r0, [pc, #484]	; (8000658 <display7SEG1+0x318>)
 8000472:	f001 fc1e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2108      	movs	r1, #8
 800047a:	4877      	ldr	r0, [pc, #476]	; (8000658 <display7SEG1+0x318>)
 800047c:	f001 fc19 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2110      	movs	r1, #16
 8000484:	4874      	ldr	r0, [pc, #464]	; (8000658 <display7SEG1+0x318>)
 8000486:	f001 fc14 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2120      	movs	r1, #32
 800048e:	4872      	ldr	r0, [pc, #456]	; (8000658 <display7SEG1+0x318>)
 8000490:	f001 fc0f 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	486f      	ldr	r0, [pc, #444]	; (8000658 <display7SEG1+0x318>)
 800049a:	f001 fc0a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800049e:	e0d7      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 4:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	486c      	ldr	r0, [pc, #432]	; (8000658 <display7SEG1+0x318>)
 80004a6:	f001 fc04 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2102      	movs	r1, #2
 80004ae:	486a      	ldr	r0, [pc, #424]	; (8000658 <display7SEG1+0x318>)
 80004b0:	f001 fbff 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2104      	movs	r1, #4
 80004b8:	4867      	ldr	r0, [pc, #412]	; (8000658 <display7SEG1+0x318>)
 80004ba:	f001 fbfa 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	4865      	ldr	r0, [pc, #404]	; (8000658 <display7SEG1+0x318>)
 80004c4:	f001 fbf5 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	4862      	ldr	r0, [pc, #392]	; (8000658 <display7SEG1+0x318>)
 80004ce:	f001 fbf0 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2120      	movs	r1, #32
 80004d6:	4860      	ldr	r0, [pc, #384]	; (8000658 <display7SEG1+0x318>)
 80004d8:	f001 fbeb 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	485d      	ldr	r0, [pc, #372]	; (8000658 <display7SEG1+0x318>)
 80004e2:	f001 fbe6 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80004e6:	e0b3      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 5:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	485a      	ldr	r0, [pc, #360]	; (8000658 <display7SEG1+0x318>)
 80004ee:	f001 fbe0 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	4858      	ldr	r0, [pc, #352]	; (8000658 <display7SEG1+0x318>)
 80004f8:	f001 fbdb 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2104      	movs	r1, #4
 8000500:	4855      	ldr	r0, [pc, #340]	; (8000658 <display7SEG1+0x318>)
 8000502:	f001 fbd6 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	4853      	ldr	r0, [pc, #332]	; (8000658 <display7SEG1+0x318>)
 800050c:	f001 fbd1 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4850      	ldr	r0, [pc, #320]	; (8000658 <display7SEG1+0x318>)
 8000516:	f001 fbcc 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	484e      	ldr	r0, [pc, #312]	; (8000658 <display7SEG1+0x318>)
 8000520:	f001 fbc7 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	484b      	ldr	r0, [pc, #300]	; (8000658 <display7SEG1+0x318>)
 800052a:	f001 fbc2 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800052e:	e08f      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 6:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	4848      	ldr	r0, [pc, #288]	; (8000658 <display7SEG1+0x318>)
 8000536:	f001 fbbc 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2102      	movs	r1, #2
 800053e:	4846      	ldr	r0, [pc, #280]	; (8000658 <display7SEG1+0x318>)
 8000540:	f001 fbb7 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2104      	movs	r1, #4
 8000548:	4843      	ldr	r0, [pc, #268]	; (8000658 <display7SEG1+0x318>)
 800054a:	f001 fbb2 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2108      	movs	r1, #8
 8000552:	4841      	ldr	r0, [pc, #260]	; (8000658 <display7SEG1+0x318>)
 8000554:	f001 fbad 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2110      	movs	r1, #16
 800055c:	483e      	ldr	r0, [pc, #248]	; (8000658 <display7SEG1+0x318>)
 800055e:	f001 fba8 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	483c      	ldr	r0, [pc, #240]	; (8000658 <display7SEG1+0x318>)
 8000568:	f001 fba3 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	4839      	ldr	r0, [pc, #228]	; (8000658 <display7SEG1+0x318>)
 8000572:	f001 fb9e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 8000576:	e06b      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 7:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4836      	ldr	r0, [pc, #216]	; (8000658 <display7SEG1+0x318>)
 800057e:	f001 fb98 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2102      	movs	r1, #2
 8000586:	4834      	ldr	r0, [pc, #208]	; (8000658 <display7SEG1+0x318>)
 8000588:	f001 fb93 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2104      	movs	r1, #4
 8000590:	4831      	ldr	r0, [pc, #196]	; (8000658 <display7SEG1+0x318>)
 8000592:	f001 fb8e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2108      	movs	r1, #8
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <display7SEG1+0x318>)
 800059c:	f001 fb89 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <display7SEG1+0x318>)
 80005a6:	f001 fb84 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	482a      	ldr	r0, [pc, #168]	; (8000658 <display7SEG1+0x318>)
 80005b0:	f001 fb7f 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2140      	movs	r1, #64	; 0x40
 80005b8:	4827      	ldr	r0, [pc, #156]	; (8000658 <display7SEG1+0x318>)
 80005ba:	f001 fb7a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80005be:	e047      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 8:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	4824      	ldr	r0, [pc, #144]	; (8000658 <display7SEG1+0x318>)
 80005c6:	f001 fb74 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	4822      	ldr	r0, [pc, #136]	; (8000658 <display7SEG1+0x318>)
 80005d0:	f001 fb6f 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	481f      	ldr	r0, [pc, #124]	; (8000658 <display7SEG1+0x318>)
 80005da:	f001 fb6a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	481d      	ldr	r0, [pc, #116]	; (8000658 <display7SEG1+0x318>)
 80005e4:	f001 fb65 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	481a      	ldr	r0, [pc, #104]	; (8000658 <display7SEG1+0x318>)
 80005ee:	f001 fb60 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <display7SEG1+0x318>)
 80005f8:	f001 fb5b 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <display7SEG1+0x318>)
 8000602:	f001 fb56 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 8000606:	e023      	b.n	8000650 <display7SEG1+0x310>
  		}
  	case 9:{
  		HAL_GPIO_WritePin(s0_GPIO_Port, s0_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <display7SEG1+0x318>)
 800060e:	f001 fb50 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s1_GPIO_Port, s1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <display7SEG1+0x318>)
 8000618:	f001 fb4b 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s2_GPIO_Port, s2_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2104      	movs	r1, #4
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <display7SEG1+0x318>)
 8000622:	f001 fb46 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s3_GPIO_Port, s3_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <display7SEG1+0x318>)
 800062c:	f001 fb41 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s4_GPIO_Port, s4_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <display7SEG1+0x318>)
 8000636:	f001 fb3c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s5_GPIO_Port, s5_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <display7SEG1+0x318>)
 8000640:	f001 fb37 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s6_GPIO_Port, s6_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <display7SEG1+0x318>)
 800064a:	f001 fb32 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800064e:	bf00      	nop
  		}
  	}
 }
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40010c00 	.word	0x40010c00

0800065c <display7SEG2>:

void display7SEG2 (int counter){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b09      	cmp	r3, #9
 8000668:	f200 81bc 	bhi.w	80009e4 <display7SEG2+0x388>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <display7SEG2+0x18>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	0800069d 	.word	0x0800069d
 8000678:	080006f1 	.word	0x080006f1
 800067c:	08000745 	.word	0x08000745
 8000680:	08000799 	.word	0x08000799
 8000684:	080007ed 	.word	0x080007ed
 8000688:	08000841 	.word	0x08000841
 800068c:	08000895 	.word	0x08000895
 8000690:	080008e9 	.word	0x080008e9
 8000694:	0800093d 	.word	0x0800093d
 8000698:	08000991 	.word	0x08000991
  	switch(counter){
  	case 0:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	48d2      	ldr	r0, [pc, #840]	; (80009ec <display7SEG2+0x390>)
 80006a2:	f001 fb06 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	48cf      	ldr	r0, [pc, #828]	; (80009ec <display7SEG2+0x390>)
 80006ae:	f001 fb00 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b8:	48cc      	ldr	r0, [pc, #816]	; (80009ec <display7SEG2+0x390>)
 80006ba:	f001 fafa 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	48c9      	ldr	r0, [pc, #804]	; (80009ec <display7SEG2+0x390>)
 80006c6:	f001 faf4 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	48c6      	ldr	r0, [pc, #792]	; (80009ec <display7SEG2+0x390>)
 80006d2:	f001 faee 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	48c3      	ldr	r0, [pc, #780]	; (80009ec <display7SEG2+0x390>)
 80006de:	f001 fae8 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	48c0      	ldr	r0, [pc, #768]	; (80009ec <display7SEG2+0x390>)
 80006ea:	f001 fae2 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80006ee:	e179      	b.n	80009e4 <display7SEG2+0x388>
  			}
  	case 1:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	48bd      	ldr	r0, [pc, #756]	; (80009ec <display7SEG2+0x390>)
 80006f6:	f001 fadc 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	48ba      	ldr	r0, [pc, #744]	; (80009ec <display7SEG2+0x390>)
 8000702:	f001 fad6 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	48b7      	ldr	r0, [pc, #732]	; (80009ec <display7SEG2+0x390>)
 800070e:	f001 fad0 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	48b4      	ldr	r0, [pc, #720]	; (80009ec <display7SEG2+0x390>)
 800071a:	f001 faca 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	48b1      	ldr	r0, [pc, #708]	; (80009ec <display7SEG2+0x390>)
 8000726:	f001 fac4 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	48ae      	ldr	r0, [pc, #696]	; (80009ec <display7SEG2+0x390>)
 8000732:	f001 fabe 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	48ab      	ldr	r0, [pc, #684]	; (80009ec <display7SEG2+0x390>)
 800073e:	f001 fab8 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 8000742:	e14f      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 2:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	48a8      	ldr	r0, [pc, #672]	; (80009ec <display7SEG2+0x390>)
 800074a:	f001 fab2 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	48a5      	ldr	r0, [pc, #660]	; (80009ec <display7SEG2+0x390>)
 8000756:	f001 faac 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000760:	48a2      	ldr	r0, [pc, #648]	; (80009ec <display7SEG2+0x390>)
 8000762:	f001 faa6 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	489f      	ldr	r0, [pc, #636]	; (80009ec <display7SEG2+0x390>)
 800076e:	f001 faa0 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	489c      	ldr	r0, [pc, #624]	; (80009ec <display7SEG2+0x390>)
 800077a:	f001 fa9a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	4899      	ldr	r0, [pc, #612]	; (80009ec <display7SEG2+0x390>)
 8000786:	f001 fa94 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	4896      	ldr	r0, [pc, #600]	; (80009ec <display7SEG2+0x390>)
 8000792:	f001 fa8e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 8000796:	e125      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 3:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4893      	ldr	r0, [pc, #588]	; (80009ec <display7SEG2+0x390>)
 800079e:	f001 fa88 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	4890      	ldr	r0, [pc, #576]	; (80009ec <display7SEG2+0x390>)
 80007aa:	f001 fa82 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	488d      	ldr	r0, [pc, #564]	; (80009ec <display7SEG2+0x390>)
 80007b6:	f001 fa7c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c0:	488a      	ldr	r0, [pc, #552]	; (80009ec <display7SEG2+0x390>)
 80007c2:	f001 fa76 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4887      	ldr	r0, [pc, #540]	; (80009ec <display7SEG2+0x390>)
 80007ce:	f001 fa70 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	4884      	ldr	r0, [pc, #528]	; (80009ec <display7SEG2+0x390>)
 80007da:	f001 fa6a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4881      	ldr	r0, [pc, #516]	; (80009ec <display7SEG2+0x390>)
 80007e6:	f001 fa64 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80007ea:	e0fb      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 4:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	487e      	ldr	r0, [pc, #504]	; (80009ec <display7SEG2+0x390>)
 80007f2:	f001 fa5e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fc:	487b      	ldr	r0, [pc, #492]	; (80009ec <display7SEG2+0x390>)
 80007fe:	f001 fa58 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	4878      	ldr	r0, [pc, #480]	; (80009ec <display7SEG2+0x390>)
 800080a:	f001 fa52 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000814:	4875      	ldr	r0, [pc, #468]	; (80009ec <display7SEG2+0x390>)
 8000816:	f001 fa4c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000820:	4872      	ldr	r0, [pc, #456]	; (80009ec <display7SEG2+0x390>)
 8000822:	f001 fa46 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	486f      	ldr	r0, [pc, #444]	; (80009ec <display7SEG2+0x390>)
 800082e:	f001 fa40 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	486c      	ldr	r0, [pc, #432]	; (80009ec <display7SEG2+0x390>)
 800083a:	f001 fa3a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800083e:	e0d1      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 5:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4869      	ldr	r0, [pc, #420]	; (80009ec <display7SEG2+0x390>)
 8000846:	f001 fa34 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4866      	ldr	r0, [pc, #408]	; (80009ec <display7SEG2+0x390>)
 8000852:	f001 fa2e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085c:	4863      	ldr	r0, [pc, #396]	; (80009ec <display7SEG2+0x390>)
 800085e:	f001 fa28 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000868:	4860      	ldr	r0, [pc, #384]	; (80009ec <display7SEG2+0x390>)
 800086a:	f001 fa22 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000874:	485d      	ldr	r0, [pc, #372]	; (80009ec <display7SEG2+0x390>)
 8000876:	f001 fa1c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000880:	485a      	ldr	r0, [pc, #360]	; (80009ec <display7SEG2+0x390>)
 8000882:	f001 fa16 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	4857      	ldr	r0, [pc, #348]	; (80009ec <display7SEG2+0x390>)
 800088e:	f001 fa10 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 8000892:	e0a7      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 6:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	4854      	ldr	r0, [pc, #336]	; (80009ec <display7SEG2+0x390>)
 800089a:	f001 fa0a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	4851      	ldr	r0, [pc, #324]	; (80009ec <display7SEG2+0x390>)
 80008a6:	f001 fa04 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <display7SEG2+0x390>)
 80008b2:	f001 f9fe 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	484b      	ldr	r0, [pc, #300]	; (80009ec <display7SEG2+0x390>)
 80008be:	f001 f9f8 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c8:	4848      	ldr	r0, [pc, #288]	; (80009ec <display7SEG2+0x390>)
 80008ca:	f001 f9f2 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d4:	4845      	ldr	r0, [pc, #276]	; (80009ec <display7SEG2+0x390>)
 80008d6:	f001 f9ec 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	4842      	ldr	r0, [pc, #264]	; (80009ec <display7SEG2+0x390>)
 80008e2:	f001 f9e6 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80008e6:	e07d      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 7:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	483f      	ldr	r0, [pc, #252]	; (80009ec <display7SEG2+0x390>)
 80008ee:	f001 f9e0 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <display7SEG2+0x390>)
 80008fa:	f001 f9da 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000904:	4839      	ldr	r0, [pc, #228]	; (80009ec <display7SEG2+0x390>)
 8000906:	f001 f9d4 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	4836      	ldr	r0, [pc, #216]	; (80009ec <display7SEG2+0x390>)
 8000912:	f001 f9ce 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091c:	4833      	ldr	r0, [pc, #204]	; (80009ec <display7SEG2+0x390>)
 800091e:	f001 f9c8 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <display7SEG2+0x390>)
 800092a:	f001 f9c2 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <display7SEG2+0x390>)
 8000936:	f001 f9bc 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800093a:	e053      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 8:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <display7SEG2+0x390>)
 8000942:	f001 f9b6 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094c:	4827      	ldr	r0, [pc, #156]	; (80009ec <display7SEG2+0x390>)
 800094e:	f001 f9b0 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	4824      	ldr	r0, [pc, #144]	; (80009ec <display7SEG2+0x390>)
 800095a:	f001 f9aa 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <display7SEG2+0x390>)
 8000966:	f001 f9a4 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	481e      	ldr	r0, [pc, #120]	; (80009ec <display7SEG2+0x390>)
 8000972:	f001 f99e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	481b      	ldr	r0, [pc, #108]	; (80009ec <display7SEG2+0x390>)
 800097e:	f001 f998 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <display7SEG2+0x390>)
 800098a:	f001 f992 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 800098e:	e029      	b.n	80009e4 <display7SEG2+0x388>
  		}
  	case 9:{
  		HAL_GPIO_WritePin(s7_GPIO_Port, s7_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <display7SEG2+0x390>)
 8000996:	f001 f98c 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s8_GPIO_Port, s8_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <display7SEG2+0x390>)
 80009a2:	f001 f986 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s9_GPIO_Port, s9_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <display7SEG2+0x390>)
 80009ae:	f001 f980 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s10_GPIO_Port, s10_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <display7SEG2+0x390>)
 80009ba:	f001 f97a 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s11_GPIO_Port, s11_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <display7SEG2+0x390>)
 80009c6:	f001 f974 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s12_GPIO_Port, s12_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <display7SEG2+0x390>)
 80009d2:	f001 f96e 	bl	8001cb2 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(s13_GPIO_Port, s13_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <display7SEG2+0x390>)
 80009de:	f001 f968 	bl	8001cb2 <HAL_GPIO_WritePin>
  		break;
 80009e2:	bf00      	nop
  		}
  	}
 }
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <display_7SEG_automatic>:

void display_7SEG_automatic()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	switch(automatic_7SEG){
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <display_7SEG_automatic+0xc4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <display_7SEG_automatic+0x12>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d028      	beq.n	8000a52 <display_7SEG_automatic+0x62>
			setTimer3(50);
			automatic_7SEG = E01;
		}
		break;
	default:
		break;
 8000a00:	e056      	b.n	8000ab0 <display_7SEG_automatic+0xc0>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	482c      	ldr	r0, [pc, #176]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a08:	f001 f953 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a14:	f001 f94d 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a20:	f001 f947 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a2c:	f001 f941 	bl	8001cb2 <HAL_GPIO_WritePin>
		display7SEG1(0);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fc85 	bl	8000340 <display7SEG1>
		display7SEG2(0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fe10 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <display_7SEG_automatic+0xcc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d132      	bne.n	8000aaa <display_7SEG_automatic+0xba>
			setTimer3(50);
 8000a44:	2032      	movs	r0, #50	; 0x32
 8000a46:	f000 fbcf 	bl	80011e8 <setTimer3>
			automatic_7SEG = E12;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <display_7SEG_automatic+0xc4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
		break;
 8000a50:	e02b      	b.n	8000aaa <display_7SEG_automatic+0xba>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a58:	f001 f92b 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a64:	f001 f925 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a70:	f001 f91f 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <display_7SEG_automatic+0xc8>)
 8000a7c:	f001 f919 	bl	8001cb2 <HAL_GPIO_WritePin>
		display7SEG1(countdown1);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <display_7SEG_automatic+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fc5b 	bl	8000340 <display7SEG1>
		display7SEG2(countdown2);
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <display_7SEG_automatic+0xd4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fde4 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <display_7SEG_automatic+0xcc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <display_7SEG_automatic+0xbe>
			setTimer3(50);
 8000a9c:	2032      	movs	r0, #50	; 0x32
 8000a9e:	f000 fba3 	bl	80011e8 <setTimer3>
			automatic_7SEG = E01;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <display_7SEG_automatic+0xc4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		break;
 8000aa8:	e001      	b.n	8000aae <display_7SEG_automatic+0xbe>
		break;
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <display_7SEG_automatic+0xc0>
		break;
 8000aae:	bf00      	nop
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000078 	.word	0x20000078
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	20000040 	.word	0x20000040
 8000ac0:	200000a4 	.word	0x200000a4
 8000ac4:	200000a8 	.word	0x200000a8

08000ac8 <display_manual>:

void display_manual(int MODE){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	switch(automatic_7SEG){
 8000ad0:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <display_manual+0xf0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <display_manual+0x16>
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d030      	beq.n	8000b3e <display_manual+0x76>
			setTimer3(50);
			automatic_7SEG = E01;
		}
		break;
	default:
		break;
 8000adc:	e067      	b.n	8000bae <display_manual+0xe6>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	4836      	ldr	r0, [pc, #216]	; (8000bbc <display_manual+0xf4>)
 8000ae4:	f001 f8e5 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	4833      	ldr	r0, [pc, #204]	; (8000bbc <display_manual+0xf4>)
 8000af0:	f001 f8df 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afa:	4830      	ldr	r0, [pc, #192]	; (8000bbc <display_manual+0xf4>)
 8000afc:	f001 f8d9 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b06:	482d      	ldr	r0, [pc, #180]	; (8000bbc <display_manual+0xf4>)
 8000b08:	f001 f8d3 	bl	8001cb2 <HAL_GPIO_WritePin>
		display7SEG1(count/10);
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <display_manual+0xf8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a2c      	ldr	r2, [pc, #176]	; (8000bc4 <display_manual+0xfc>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1092      	asrs	r2, r2, #2
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fc0f 	bl	8000340 <display7SEG1>
		display7SEG2(0);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fd9a 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <display_manual+0x100>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d13b      	bne.n	8000ba8 <display_manual+0xe0>
			setTimer3(50);
 8000b30:	2032      	movs	r0, #50	; 0x32
 8000b32:	f000 fb59 	bl	80011e8 <setTimer3>
			automatic_7SEG = E12;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <display_manual+0xf0>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
		break;
 8000b3c:	e034      	b.n	8000ba8 <display_manual+0xe0>
		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	481e      	ldr	r0, [pc, #120]	; (8000bbc <display_manual+0xf4>)
 8000b44:	f001 f8b5 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	481b      	ldr	r0, [pc, #108]	; (8000bbc <display_manual+0xf4>)
 8000b50:	f001 f8af 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <display_manual+0xf4>)
 8000b5c:	f001 f8a9 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	4815      	ldr	r0, [pc, #84]	; (8000bbc <display_manual+0xf4>)
 8000b68:	f001 f8a3 	bl	8001cb2 <HAL_GPIO_WritePin>
		display7SEG1(count%10);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <display_manual+0xf8>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <display_manual+0xfc>)
 8000b72:	fb83 1302 	smull	r1, r3, r3, r2
 8000b76:	1099      	asrs	r1, r3, #2
 8000b78:	17d3      	asrs	r3, r2, #31
 8000b7a:	1ac9      	subs	r1, r1, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	1ad1      	subs	r1, r2, r3
 8000b86:	4608      	mov	r0, r1
 8000b88:	f7ff fbda 	bl	8000340 <display7SEG1>
		display7SEG2(MODE);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fd65 	bl	800065c <display7SEG2>
		if(timer3_flag == 1)
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <display_manual+0x100>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d108      	bne.n	8000bac <display_manual+0xe4>
			setTimer3(50);
 8000b9a:	2032      	movs	r0, #50	; 0x32
 8000b9c:	f000 fb24 	bl	80011e8 <setTimer3>
			automatic_7SEG = E01;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <display_manual+0xf0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
		break;
 8000ba6:	e001      	b.n	8000bac <display_manual+0xe4>
		break;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <display_manual+0xe6>
		break;
 8000bac:	bf00      	nop
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000078 	.word	0x20000078
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	2000007c 	.word	0x2000007c
 8000bc4:	66666667 	.word	0x66666667
 8000bc8:	20000040 	.word	0x20000040

08000bcc <fsm_automatic_run>:
#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	switch (status1){
 8000bd0:	4b48      	ldr	r3, [pc, #288]	; (8000cf4 <fsm_automatic_run+0x128>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d841      	bhi.n	8000c5e <fsm_automatic_run+0x92>
 8000bda:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <fsm_automatic_run+0x14>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000c07 	.word	0x08000c07
 8000be8:	08000c25 	.word	0x08000c25
 8000bec:	08000c41 	.word	0x08000c41
			case INIT:
				setOfLight(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fc6f 	bl	80014d4 <setOfLight>
				status1 = AUTO_RED;
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <fsm_automatic_run+0x128>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c00:	f000 fab2 	bl	8001168 <setTimer1>
				break;
 8000c04:	e02c      	b.n	8000c60 <fsm_automatic_run+0x94>
			case AUTO_RED:
				if (timer1_flag==1){
 8000c06:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <fsm_automatic_run+0x12c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d106      	bne.n	8000c1c <fsm_automatic_run+0x50>
					status1 = AUTO_GREEN;
 8000c0e:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <fsm_automatic_run+0x128>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	601a      	str	r2, [r3, #0]
					setTimer1(700);
 8000c14:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000c18:	f000 faa6 	bl	8001168 <setTimer1>
				}
				setLightRed(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fc8b 	bl	8001538 <setLightRed>
				break;
 8000c22:	e01d      	b.n	8000c60 <fsm_automatic_run+0x94>
			case AUTO_GREEN:
				if (timer1_flag==1){
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <fsm_automatic_run+0x12c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d105      	bne.n	8000c38 <fsm_automatic_run+0x6c>
					status1 = AUTO_YELLOW;
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <fsm_automatic_run+0x128>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	601a      	str	r2, [r3, #0]
					setTimer1(200);
 8000c32:	20c8      	movs	r0, #200	; 0xc8
 8000c34:	f000 fa98 	bl	8001168 <setTimer1>
				}
				setLightGreen(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 fcaf 	bl	800159c <setLightGreen>
				break;
 8000c3e:	e00f      	b.n	8000c60 <fsm_automatic_run+0x94>
			case AUTO_YELLOW:
				if (timer1_flag==1){
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <fsm_automatic_run+0x12c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d106      	bne.n	8000c56 <fsm_automatic_run+0x8a>
					status1 = AUTO_RED;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <fsm_automatic_run+0x128>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	601a      	str	r2, [r3, #0]
					setTimer1(500);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f000 fa89 	bl	8001168 <setTimer1>
				}
				setLightYellow(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fcd2 	bl	8001600 <setLightYellow>
				break;
 8000c5c:	e000      	b.n	8000c60 <fsm_automatic_run+0x94>
			default:
				break;
 8000c5e:	bf00      	nop
			}
	switch (status2){
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <fsm_automatic_run+0x130>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d841      	bhi.n	8000cee <fsm_automatic_run+0x122>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <fsm_automatic_run+0xa4>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000c97 	.word	0x08000c97
 8000c78:	08000cb5 	.word	0x08000cb5
 8000c7c:	08000cd1 	.word	0x08000cd1
		case INIT:
			setOfLight(2);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f000 fc27 	bl	80014d4 <setOfLight>
			status2 = AUTO_RED;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <fsm_automatic_run+0x130>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	601a      	str	r2, [r3, #0]
			setTimer2(500);
 8000c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c90:	f000 fa8a 	bl	80011a8 <setTimer2>
			break;
 8000c94:	e02c      	b.n	8000cf0 <fsm_automatic_run+0x124>
		case AUTO_RED:
			if (timer2_flag==1){
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <fsm_automatic_run+0x134>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d106      	bne.n	8000cac <fsm_automatic_run+0xe0>
				status2 = AUTO_GREEN;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <fsm_automatic_run+0x130>)
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	601a      	str	r2, [r3, #0]
				setTimer2(700);
 8000ca4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000ca8:	f000 fa7e 	bl	80011a8 <setTimer2>
			}
			setLightRed(2);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 fc43 	bl	8001538 <setLightRed>
			break;
 8000cb2:	e01d      	b.n	8000cf0 <fsm_automatic_run+0x124>
		case AUTO_GREEN:
			if (timer2_flag==1){
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <fsm_automatic_run+0x134>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d105      	bne.n	8000cc8 <fsm_automatic_run+0xfc>
				status2 = AUTO_YELLOW;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <fsm_automatic_run+0x130>)
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	601a      	str	r2, [r3, #0]
				setTimer2(200);
 8000cc2:	20c8      	movs	r0, #200	; 0xc8
 8000cc4:	f000 fa70 	bl	80011a8 <setTimer2>
			}
			setLightGreen(2);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f000 fc67 	bl	800159c <setLightGreen>
			break;
 8000cce:	e00f      	b.n	8000cf0 <fsm_automatic_run+0x124>
		case AUTO_YELLOW:
			if (timer2_flag==1){
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <fsm_automatic_run+0x134>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d106      	bne.n	8000ce6 <fsm_automatic_run+0x11a>
				status2 = AUTO_RED;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <fsm_automatic_run+0x130>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000cde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce2:	f000 fa61 	bl	80011a8 <setTimer2>
			}
			setLightYellow(2);
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f000 fc8a 	bl	8001600 <setLightYellow>
			break;
 8000cec:	e000      	b.n	8000cf0 <fsm_automatic_run+0x124>
		default:
			break;
 8000cee:	bf00      	nop
		}
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000038 	.word	0x20000038
 8000cf8:	20000094 	.word	0x20000094
 8000cfc:	2000003c 	.word	0x2000003c
 8000d00:	20000098 	.word	0x20000098

08000d04 <fsm_manual_run>:
#include "fsm_manual.h"
int MODE = MODE_1;

void fsm_manual_run(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	switch (MODE){
 8000d08:	4b83      	ldr	r3, [pc, #524]	; (8000f18 <fsm_manual_run+0x214>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b0c      	subs	r3, #12
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	f200 80f7 	bhi.w	8000f02 <fsm_manual_run+0x1fe>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <fsm_manual_run+0x18>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d5b 	.word	0x08000d5b
 8000d24:	08000ded 	.word	0x08000ded
 8000d28:	08000e7b 	.word	0x08000e7b
	case MODE_1:
		fsm_automatic_run();
 8000d2c:	f7ff ff4e 	bl	8000bcc <fsm_automatic_run>
		display_7SEG_automatic();
 8000d30:	f7ff fe5e 	bl	80009f0 <display_7SEG_automatic>
		if (isButton1Pressed()){
 8000d34:	f7ff fa0a 	bl	800014c <isButton1Pressed>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 80e3 	beq.w	8000f06 <fsm_manual_run+0x202>
			MODE=MODE_2;
 8000d40:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <fsm_manual_run+0x214>)
 8000d42:	220d      	movs	r2, #13
 8000d44:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fbc4 	bl	80014d4 <setOfLight>
			setOfLight(2);
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f000 fbc1 	bl	80014d4 <setOfLight>
			delayManual(50);
 8000d52:	2032      	movs	r0, #50	; 0x32
 8000d54:	f000 fa5c 	bl	8001210 <delayManual>
		}
		break;
 8000d58:	e0d5      	b.n	8000f06 <fsm_manual_run+0x202>
	case MODE_2:
		if(timer4_flag==1){
 8000d5a:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <fsm_manual_run+0x218>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10c      	bne.n	8000d7c <fsm_manual_run+0x78>
			delayManual(50);
 8000d62:	2032      	movs	r0, #50	; 0x32
 8000d64:	f000 fa54 	bl	8001210 <delayManual>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	486c      	ldr	r0, [pc, #432]	; (8000f20 <fsm_manual_run+0x21c>)
 8000d6e:	f000 ffa0 	bl	8001cb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	486a      	ldr	r0, [pc, #424]	; (8000f20 <fsm_manual_run+0x21c>)
 8000d78:	f000 ff9b 	bl	8001cb2 <HAL_GPIO_WritePin>
		}
		if (isButton2Pressed()){
 8000d7c:	f7ff f9f8 	bl	8000170 <isButton2Pressed>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <fsm_manual_run+0x9a>
			count++;
 8000d86:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <fsm_manual_run+0x220>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a65      	ldr	r2, [pc, #404]	; (8000f24 <fsm_manual_run+0x220>)
 8000d8e:	6013      	str	r3, [r2, #0]
			if (count>99) count=0;
 8000d90:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <fsm_manual_run+0x220>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b63      	cmp	r3, #99	; 0x63
 8000d96:	dd02      	ble.n	8000d9e <fsm_manual_run+0x9a>
 8000d98:	4b62      	ldr	r3, [pc, #392]	; (8000f24 <fsm_manual_run+0x220>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed()){
 8000d9e:	f7ff f9f9 	bl	8000194 <isButton3Pressed>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <fsm_manual_run+0xb4>
			timer_Count(count*100);
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <fsm_manual_run+0x220>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2264      	movs	r2, #100	; 0x64
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fa40 	bl	8001238 <timer_Count>
		}
			display_manual(2);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff fe85 	bl	8000ac8 <display_manual>
		if (isButton1Pressed()){
 8000dbe:	f7ff f9c5 	bl	800014c <isButton1Pressed>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a0 	beq.w	8000f0a <fsm_manual_run+0x206>
			MODE=MODE_3;
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <fsm_manual_run+0x214>)
 8000dcc:	220e      	movs	r2, #14
 8000dce:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 fb7f 	bl	80014d4 <setOfLight>
			setOfLight(2);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f000 fb7c 	bl	80014d4 <setOfLight>
			setTimer1(700);
 8000ddc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000de0:	f000 f9c2 	bl	8001168 <setTimer1>
			count=0;
 8000de4:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <fsm_manual_run+0x220>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dea:	e08e      	b.n	8000f0a <fsm_manual_run+0x206>
	case MODE_3:
		if(timer4_flag==1){
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <fsm_manual_run+0x218>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10c      	bne.n	8000e0e <fsm_manual_run+0x10a>
			delayManual(50);
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f000 fa0b 	bl	8001210 <delayManual>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4848      	ldr	r0, [pc, #288]	; (8000f20 <fsm_manual_run+0x21c>)
 8000e00:	f000 ff57 	bl	8001cb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4845      	ldr	r0, [pc, #276]	; (8000f20 <fsm_manual_run+0x21c>)
 8000e0a:	f000 ff52 	bl	8001cb2 <HAL_GPIO_WritePin>
		}
		if (isButton2Pressed()){
 8000e0e:	f7ff f9af 	bl	8000170 <isButton2Pressed>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <fsm_manual_run+0x12c>
			count++;
 8000e18:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <fsm_manual_run+0x220>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <fsm_manual_run+0x220>)
 8000e20:	6013      	str	r3, [r2, #0]
			if (count>99) count=0;
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <fsm_manual_run+0x220>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b63      	cmp	r3, #99	; 0x63
 8000e28:	dd02      	ble.n	8000e30 <fsm_manual_run+0x12c>
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <fsm_manual_run+0x220>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
		}
			if (isButton3Pressed()){
 8000e30:	f7ff f9b0 	bl	8000194 <isButton3Pressed>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <fsm_manual_run+0x146>
			timer_Count(count*100);
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <fsm_manual_run+0x220>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2264      	movs	r2, #100	; 0x64
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f9f7 	bl	8001238 <timer_Count>
		}
			display_manual(3);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f7ff fe3c 	bl	8000ac8 <display_manual>
		if (isButton1Pressed()){
 8000e50:	f7ff f97c 	bl	800014c <isButton1Pressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d059      	beq.n	8000f0e <fsm_manual_run+0x20a>
			MODE=MODE_4;
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <fsm_manual_run+0x214>)
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 fb37 	bl	80014d4 <setOfLight>
			setOfLight(2);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 fb34 	bl	80014d4 <setOfLight>
			setTimer1(200);
 8000e6c:	20c8      	movs	r0, #200	; 0xc8
 8000e6e:	f000 f97b 	bl	8001168 <setTimer1>
			count=0;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <fsm_manual_run+0x220>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e78:	e049      	b.n	8000f0e <fsm_manual_run+0x20a>
	case MODE_4:
		if(timer4_flag==1){
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <fsm_manual_run+0x218>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10c      	bne.n	8000e9c <fsm_manual_run+0x198>
			delayManual(50);
 8000e82:	2032      	movs	r0, #50	; 0x32
 8000e84:	f000 f9c4 	bl	8001210 <delayManual>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4824      	ldr	r0, [pc, #144]	; (8000f20 <fsm_manual_run+0x21c>)
 8000e8e:	f000 ff10 	bl	8001cb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	4822      	ldr	r0, [pc, #136]	; (8000f20 <fsm_manual_run+0x21c>)
 8000e98:	f000 ff0b 	bl	8001cb2 <HAL_GPIO_WritePin>
		}
		if (isButton2Pressed()){
 8000e9c:	f7ff f968 	bl	8000170 <isButton2Pressed>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00b      	beq.n	8000ebe <fsm_manual_run+0x1ba>
			count++;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <fsm_manual_run+0x220>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <fsm_manual_run+0x220>)
 8000eae:	6013      	str	r3, [r2, #0]
			if (count>99) count=0;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <fsm_manual_run+0x220>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b63      	cmp	r3, #99	; 0x63
 8000eb6:	dd02      	ble.n	8000ebe <fsm_manual_run+0x1ba>
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <fsm_manual_run+0x220>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed()){
 8000ebe:	f7ff f969 	bl	8000194 <isButton3Pressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <fsm_manual_run+0x1d4>
			timer_Count(count*100);
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <fsm_manual_run+0x220>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2264      	movs	r2, #100	; 0x64
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f9b0 	bl	8001238 <timer_Count>
		}
			display_manual(4);
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f7ff fdf5 	bl	8000ac8 <display_manual>
		if (isButton1Pressed()){
 8000ede:	f7ff f935 	bl	800014c <isButton1Pressed>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d014      	beq.n	8000f12 <fsm_manual_run+0x20e>
			MODE=MODE_1;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <fsm_manual_run+0x214>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
			setOfLight(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 faf0 	bl	80014d4 <setOfLight>
			setOfLight(2);
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f000 faed 	bl	80014d4 <setOfLight>
			count=0;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <fsm_manual_run+0x220>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f00:	e007      	b.n	8000f12 <fsm_manual_run+0x20e>
	default: break;
 8000f02:	bf00      	nop
 8000f04:	e006      	b.n	8000f14 <fsm_manual_run+0x210>
		break;
 8000f06:	bf00      	nop
 8000f08:	e004      	b.n	8000f14 <fsm_manual_run+0x210>
		break;
 8000f0a:	bf00      	nop
 8000f0c:	e002      	b.n	8000f14 <fsm_manual_run+0x210>
		break;
 8000f0e:	bf00      	nop
 8000f10:	e000      	b.n	8000f14 <fsm_manual_run+0x210>
		break;
 8000f12:	bf00      	nop
	}
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000034 	.word	0x20000034
 8000f1c:	2000009c 	.word	0x2000009c
 8000f20:	40010800 	.word	0x40010800
 8000f24:	2000007c 	.word	0x2000007c

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fbc0 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f81c 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f8a2 	bl	800107c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f38:	f000 f854 	bl	8000fe4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <main+0x38>)
 8000f3e:	f001 fafd 	bl	800253c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  status1=AUTO_GREEN;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <main+0x3c>)
 8000f44:	2203      	movs	r2, #3
 8000f46:	601a      	str	r2, [r3, #0]
  status2=AUTO_RED;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <main+0x40>)
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	601a      	str	r2, [r3, #0]
  setTimer1(50);
 8000f4e:	2032      	movs	r0, #50	; 0x32
 8000f50:	f000 f90a 	bl	8001168 <setTimer1>
  setTimer2(50);
 8000f54:	2032      	movs	r0, #50	; 0x32
 8000f56:	f000 f927 	bl	80011a8 <setTimer2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 8000f5a:	f7ff fed3 	bl	8000d04 <fsm_manual_run>
 8000f5e:	e7fc      	b.n	8000f5a <main+0x32>
 8000f60:	200000ac 	.word	0x200000ac
 8000f64:	20000038 	.word	0x20000038
 8000f68:	2000003c 	.word	0x2000003c

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	2228      	movs	r2, #40	; 0x28
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fe8e 	bl	8002c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f96:	2310      	movs	r3, #16
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fe9e 	bl	8001ce4 <HAL_RCC_OscConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fae:	f000 f8d5 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 f90a 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f8c1 	bl	800115c <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3740      	adds	r7, #64	; 0x40
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM2_Init+0x94>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM2_Init+0x94>)
 800100a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800100e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_TIM2_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM2_Init+0x94>)
 8001018:	2209      	movs	r2, #9
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_TIM2_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM2_Init+0x94>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_TIM2_Init+0x94>)
 800102a:	f001 fa37 	bl	800249c <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001034:	f000 f892 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM2_Init+0x94>)
 8001046:	f001 fbb5 	bl	80027b4 <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 f884 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM2_Init+0x94>)
 8001062:	f001 fd8d 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 f876 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000ac 	.word	0x200000ac

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_GPIO_Init+0xbc>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <MX_GPIO_Init+0xbc>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_GPIO_Init+0xbc>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_GPIO_Init+0xbc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <MX_GPIO_Init+0xbc>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_GPIO_Init+0xbc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|Y1_Pin|G1_Pin|R2_Pin
 80010c0:	2200      	movs	r2, #0
 80010c2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80010c6:	481d      	ldr	r0, [pc, #116]	; (800113c <MX_GPIO_Init+0xc0>)
 80010c8:	f000 fdf3 	bl	8001cb2 <HAL_GPIO_WritePin>
                          |Y2_Pin|G2_Pin|E0_Pin|E1_Pin
                          |E2_Pin|E3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, s0_Pin|s1_Pin|s2_Pin|s10_Pin
 80010cc:	2200      	movs	r2, #0
 80010ce:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <MX_GPIO_Init+0xc4>)
 80010d4:	f000 fded 	bl	8001cb2 <HAL_GPIO_WritePin>
                          |s8_Pin|s9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin R2_Pin
                           Y2_Pin G2_Pin E0_Pin E1_Pin
                           E2_Pin E3_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|R2_Pin
 80010d8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80010dc:	60bb      	str	r3, [r7, #8]
                          |Y2_Pin|G2_Pin|E0_Pin|E1_Pin
                          |E2_Pin|E3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2302      	movs	r3, #2
 80010e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	4812      	ldr	r0, [pc, #72]	; (800113c <MX_GPIO_Init+0xc0>)
 80010f2:	f000 fc4d 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : s0_Pin s1_Pin s2_Pin s10_Pin
                           s11_Pin s12_Pin s13_Pin s3_Pin
                           s4_Pin s5_Pin s6_Pin s7_Pin
                           s8_Pin s9_Pin */
  GPIO_InitStruct.Pin = s0_Pin|s1_Pin|s2_Pin|s10_Pin
 80010f6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80010fa:	60bb      	str	r3, [r7, #8]
                          |s11_Pin|s12_Pin|s13_Pin|s3_Pin
                          |s4_Pin|s5_Pin|s6_Pin|s7_Pin
                          |s8_Pin|s9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_GPIO_Init+0xc4>)
 8001110:	f000 fc3e 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001114:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_GPIO_Init+0xc0>)
 800112a:	f000 fc31 	bl	8001990 <HAL_GPIO_Init>

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800
 8001140:	40010c00 	.word	0x40010c00

08001144 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	timer_run();
 800114c:	f000 f888 	bl	8001260 <timer_run>
	getKeyInput();
 8001150:	f7ff f856 	bl	8000200 <getKeyInput>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <setTimer1>:
int timer4_flag = 0;
int timer5_flag = 0;
int countdown1 = 0;
int countdown2 = 0;

void setTimer1 ( int duration ) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <setTimer1+0x30>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
	countdown1=duration/100;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <setTimer1+0x34>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	1152      	asrs	r2, r2, #5
 8001180:	17db      	asrs	r3, r3, #31
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <setTimer1+0x38>)
 8001186:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <setTimer1+0x3c>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000080 	.word	0x20000080
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	20000094 	.word	0x20000094

080011a8 <setTimer2>:
void setTimer2 ( int duration ) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <setTimer2+0x30>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
	countdown2=duration/100;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a08      	ldr	r2, [pc, #32]	; (80011dc <setTimer2+0x34>)
 80011ba:	fb82 1203 	smull	r1, r2, r2, r3
 80011be:	1152      	asrs	r2, r2, #5
 80011c0:	17db      	asrs	r3, r3, #31
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <setTimer2+0x38>)
 80011c6:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <setTimer2+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000084 	.word	0x20000084
 80011dc:	51eb851f 	.word	0x51eb851f
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	20000098 	.word	0x20000098

080011e8 <setTimer3>:
void setTimer3 ( int duration ) {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <setTimer3+0x20>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <setTimer3+0x24>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000088 	.word	0x20000088
 800120c:	20000040 	.word	0x20000040

08001210 <delayManual>:
void delayManual ( int duration ) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <delayManual+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <delayManual+0x24>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000008c 	.word	0x2000008c
 8001234:	2000009c 	.word	0x2000009c

08001238 <timer_Count>:
void timer_Count ( int duration ) {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001240:	4a05      	ldr	r2, [pc, #20]	; (8001258 <timer_Count+0x20>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <timer_Count+0x24>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000090 	.word	0x20000090
 800125c:	200000a0 	.word	0x200000a0

08001260 <timer_run>:
void timer_run () {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	if( timer1_counter > 0) {
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <timer_run+0x120>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd1e      	ble.n	80012aa <timer_run+0x4a>
		timer1_counter --;
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <timer_run+0x120>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a43      	ldr	r2, [pc, #268]	; (8001380 <timer_run+0x120>)
 8001274:	6013      	str	r3, [r2, #0]
		if(timer1_counter%100==0)
 8001276:	4b42      	ldr	r3, [pc, #264]	; (8001380 <timer_run+0x120>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <timer_run+0x124>)
 800127c:	fb83 1302 	smull	r1, r3, r3, r2
 8001280:	1159      	asrs	r1, r3, #5
 8001282:	17d3      	asrs	r3, r2, #31
 8001284:	1acb      	subs	r3, r1, r3
 8001286:	2164      	movs	r1, #100	; 0x64
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d104      	bne.n	800129c <timer_run+0x3c>
			countdown1--;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <timer_run+0x128>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a3b      	ldr	r2, [pc, #236]	; (8001388 <timer_run+0x128>)
 800129a:	6013      	str	r3, [r2, #0]
		if( timer1_counter == 0)
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <timer_run+0x120>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <timer_run+0x4a>
			timer1_flag = 1;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <timer_run+0x12c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
	}
	if( timer2_counter > 0) {
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <timer_run+0x130>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd1e      	ble.n	80012f0 <timer_run+0x90>
		timer2_counter --;
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <timer_run+0x130>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a35      	ldr	r2, [pc, #212]	; (8001390 <timer_run+0x130>)
 80012ba:	6013      	str	r3, [r2, #0]
		if(timer2_counter%100==0)
 80012bc:	4b34      	ldr	r3, [pc, #208]	; (8001390 <timer_run+0x130>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <timer_run+0x124>)
 80012c2:	fb83 1302 	smull	r1, r3, r3, r2
 80012c6:	1159      	asrs	r1, r3, #5
 80012c8:	17d3      	asrs	r3, r2, #31
 80012ca:	1acb      	subs	r3, r1, r3
 80012cc:	2164      	movs	r1, #100	; 0x64
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <timer_run+0x82>
			countdown2--;
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <timer_run+0x134>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <timer_run+0x134>)
 80012e0:	6013      	str	r3, [r2, #0]
		if( timer2_counter == 0)
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <timer_run+0x130>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <timer_run+0x90>
			timer2_flag = 1;
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <timer_run+0x138>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
		}
	if( timer3_counter > 0) {
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <timer_run+0x13c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd0b      	ble.n	8001310 <timer_run+0xb0>
		timer3_counter --;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <timer_run+0x13c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a27      	ldr	r2, [pc, #156]	; (800139c <timer_run+0x13c>)
 8001300:	6013      	str	r3, [r2, #0]
		if( timer3_counter == 0)
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <timer_run+0x13c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <timer_run+0xb0>
			timer3_flag = 1;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <timer_run+0x140>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
		}
	if( timer4_counter > 0) {
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <timer_run+0x144>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd0b      	ble.n	8001330 <timer_run+0xd0>
		timer4_counter --;
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <timer_run+0x144>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <timer_run+0x144>)
 8001320:	6013      	str	r3, [r2, #0]
		if( timer4_counter == 0)
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <timer_run+0x144>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <timer_run+0xd0>
			timer4_flag = 1;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <timer_run+0x148>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
		}
	if( timer5_counter > 0) {
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <timer_run+0x14c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dd1e      	ble.n	8001376 <timer_run+0x116>
		timer5_counter --;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <timer_run+0x14c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <timer_run+0x14c>)
 8001340:	6013      	str	r3, [r2, #0]
		if(timer5_counter%100==0)
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <timer_run+0x14c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <timer_run+0x124>)
 8001348:	fb83 1302 	smull	r1, r3, r3, r2
 800134c:	1159      	asrs	r1, r3, #5
 800134e:	17d3      	asrs	r3, r2, #31
 8001350:	1acb      	subs	r3, r1, r3
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <timer_run+0x108>
			count--;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <timer_run+0x150>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <timer_run+0x150>)
 8001366:	6013      	str	r3, [r2, #0]
		if( timer5_counter == 0)
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <timer_run+0x14c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <timer_run+0x116>
			timer5_flag = 1;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <timer_run+0x154>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
		}
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000080 	.word	0x20000080
 8001384:	51eb851f 	.word	0x51eb851f
 8001388:	200000a4 	.word	0x200000a4
 800138c:	20000094 	.word	0x20000094
 8001390:	20000084 	.word	0x20000084
 8001394:	200000a8 	.word	0x200000a8
 8001398:	20000098 	.word	0x20000098
 800139c:	20000088 	.word	0x20000088
 80013a0:	20000040 	.word	0x20000040
 80013a4:	2000008c 	.word	0x2000008c
 80013a8:	2000009c 	.word	0x2000009c
 80013ac:	20000090 	.word	0x20000090
 80013b0:	2000007c 	.word	0x2000007c
 80013b4:	200000a0 	.word	0x200000a0

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_MspInit+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x5c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x5c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_MspInit+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_MspInit+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d113      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201c      	movs	r0, #28
 800144c:	f000 fa69 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001450:	201c      	movs	r0, #28
 8001452:	f000 fa82 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014aa:	f000 f947 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM2_IRQHandler+0x10>)
 80014ba:	f001 f88b 	bl	80025d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000ac 	.word	0x200000ac

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <setOfLight>:
#include <traffic_light.h>

void setOfLight(int lane){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	switch (lane){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d003      	beq.n	80014ea <setOfLight+0x16>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d010      	beq.n	800150a <setOfLight+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
		break;
	}
}
 80014e8:	e01f      	b.n	800152a <setOfLight+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <setOfLight+0x60>)
 80014f0:	f000 fbdf 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2108      	movs	r1, #8
 80014f8:	480e      	ldr	r0, [pc, #56]	; (8001534 <setOfLight+0x60>)
 80014fa:	f000 fbda 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2104      	movs	r1, #4
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <setOfLight+0x60>)
 8001504:	f000 fbd5 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 8001508:	e00f      	b.n	800152a <setOfLight+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2110      	movs	r1, #16
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <setOfLight+0x60>)
 8001510:	f000 fbcf 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <setOfLight+0x60>)
 800151a:	f000 fbca 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2120      	movs	r1, #32
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <setOfLight+0x60>)
 8001524:	f000 fbc5 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 8001528:	bf00      	nop
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010800 	.word	0x40010800

08001538 <setLightRed>:

void setLightRed(int lane){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	switch (lane){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d003      	beq.n	800154e <setLightRed+0x16>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d010      	beq.n	800156e <setLightRed+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
		break;
	}
}
 800154c:	e01f      	b.n	800158e <setLightRed+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2102      	movs	r1, #2
 8001552:	4811      	ldr	r0, [pc, #68]	; (8001598 <setLightRed+0x60>)
 8001554:	f000 fbad 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2108      	movs	r1, #8
 800155c:	480e      	ldr	r0, [pc, #56]	; (8001598 <setLightRed+0x60>)
 800155e:	f000 fba8 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2104      	movs	r1, #4
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <setLightRed+0x60>)
 8001568:	f000 fba3 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 800156c:	e00f      	b.n	800158e <setLightRed+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2110      	movs	r1, #16
 8001572:	4809      	ldr	r0, [pc, #36]	; (8001598 <setLightRed+0x60>)
 8001574:	f000 fb9d 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	4806      	ldr	r0, [pc, #24]	; (8001598 <setLightRed+0x60>)
 800157e:	f000 fb98 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2120      	movs	r1, #32
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <setLightRed+0x60>)
 8001588:	f000 fb93 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 800158c:	bf00      	nop
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010800 	.word	0x40010800

0800159c <setLightGreen>:
void setLightGreen(int lane){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	switch(lane){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d003      	beq.n	80015b2 <setLightGreen+0x16>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d010      	beq.n	80015d2 <setLightGreen+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
		break;
	}
}
 80015b0:	e01f      	b.n	80015f2 <setLightGreen+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2102      	movs	r1, #2
 80015b6:	4811      	ldr	r0, [pc, #68]	; (80015fc <setLightGreen+0x60>)
 80015b8:	f000 fb7b 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2108      	movs	r1, #8
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <setLightGreen+0x60>)
 80015c2:	f000 fb76 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <setLightGreen+0x60>)
 80015cc:	f000 fb71 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 80015d0:	e00f      	b.n	80015f2 <setLightGreen+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2110      	movs	r1, #16
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <setLightGreen+0x60>)
 80015d8:	f000 fb6b 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	4806      	ldr	r0, [pc, #24]	; (80015fc <setLightGreen+0x60>)
 80015e2:	f000 fb66 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2120      	movs	r1, #32
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <setLightGreen+0x60>)
 80015ec:	f000 fb61 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 80015f0:	bf00      	nop
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010800 	.word	0x40010800

08001600 <setLightYellow>:
void setLightYellow(int lane){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	switch(lane){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d003      	beq.n	8001616 <setLightYellow+0x16>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d010      	beq.n	8001636 <setLightYellow+0x36>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
		break;
	}
}
 8001614:	e01f      	b.n	8001656 <setLightYellow+0x56>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2102      	movs	r1, #2
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <setLightYellow+0x60>)
 800161c:	f000 fb49 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2108      	movs	r1, #8
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <setLightYellow+0x60>)
 8001626:	f000 fb44 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2104      	movs	r1, #4
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <setLightYellow+0x60>)
 8001630:	f000 fb3f 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 8001634:	e00f      	b.n	8001656 <setLightYellow+0x56>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2110      	movs	r1, #16
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <setLightYellow+0x60>)
 800163c:	f000 fb39 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <setLightYellow+0x60>)
 8001646:	f000 fb34 	bl	8001cb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2120      	movs	r1, #32
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <setLightYellow+0x60>)
 8001650:	f000 fb2f 	bl	8001cb2 <HAL_GPIO_WritePin>
		break;
 8001654:	bf00      	nop
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010800 	.word	0x40010800

08001664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ff30 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166a:	490c      	ldr	r1, [pc, #48]	; (800169c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001680:	4c09      	ldr	r4, [pc, #36]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f001 fae1 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff fc49 	bl	8000f28 <main>
  bx lr
 8001696:	4770      	bx	lr
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80016a0:	08002cf0 	.word	0x08002cf0
  ldr r2, =_sbss
 80016a4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80016a8:	200000f8 	.word	0x200000f8

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x28>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x28>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f923 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fe74 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f93b 	bl	8001976 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f903 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000044 	.word	0x20000044
 8001734:	2000004c 	.word	0x2000004c
 8001738:	20000048 	.word	0x20000048

0800173c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x1c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x20>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <HAL_IncTick+0x20>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	2000004c 	.word	0x2000004c
 800175c:	200000f4 	.word	0x200000f4

08001760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <HAL_GetTick+0x10>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	200000f4 	.word	0x200000f4

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <__NVIC_EnableIRQ+0x34>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff90 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff2d 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff42 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff90 	bl	8001864 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5f 	bl	8001810 <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff35 	bl	80017d8 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b08b      	sub	sp, #44	; 0x2c
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e148      	b.n	8001c36 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a4:	2201      	movs	r2, #1
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8137 	bne.w	8001c30 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4aa3      	ldr	r2, [pc, #652]	; (8001c54 <HAL_GPIO_Init+0x2c4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d05e      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019cc:	4aa1      	ldr	r2, [pc, #644]	; (8001c54 <HAL_GPIO_Init+0x2c4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d875      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019d2:	4aa1      	ldr	r2, [pc, #644]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d058      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019d8:	4a9f      	ldr	r2, [pc, #636]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d86f      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019de:	4a9f      	ldr	r2, [pc, #636]	; (8001c5c <HAL_GPIO_Init+0x2cc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d052      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019e4:	4a9d      	ldr	r2, [pc, #628]	; (8001c5c <HAL_GPIO_Init+0x2cc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d869      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019ea:	4a9d      	ldr	r2, [pc, #628]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d04c      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019f0:	4a9b      	ldr	r2, [pc, #620]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d863      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019f6:	4a9b      	ldr	r2, [pc, #620]	; (8001c64 <HAL_GPIO_Init+0x2d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d046      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019fc:	4a99      	ldr	r2, [pc, #612]	; (8001c64 <HAL_GPIO_Init+0x2d4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d85d      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d82a      	bhi.n	8001a5c <HAL_GPIO_Init+0xcc>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d859      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <HAL_GPIO_Init+0x80>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a65 	.word	0x08001a65
 8001a18:	08001a77 	.word	0x08001a77
 8001a1c:	08001ab9 	.word	0x08001ab9
 8001a20:	08001abf 	.word	0x08001abf
 8001a24:	08001abf 	.word	0x08001abf
 8001a28:	08001abf 	.word	0x08001abf
 8001a2c:	08001abf 	.word	0x08001abf
 8001a30:	08001abf 	.word	0x08001abf
 8001a34:	08001abf 	.word	0x08001abf
 8001a38:	08001abf 	.word	0x08001abf
 8001a3c:	08001abf 	.word	0x08001abf
 8001a40:	08001abf 	.word	0x08001abf
 8001a44:	08001abf 	.word	0x08001abf
 8001a48:	08001abf 	.word	0x08001abf
 8001a4c:	08001abf 	.word	0x08001abf
 8001a50:	08001abf 	.word	0x08001abf
 8001a54:	08001a6d 	.word	0x08001a6d
 8001a58:	08001a81 	.word	0x08001a81
 8001a5c:	4a82      	ldr	r2, [pc, #520]	; (8001c68 <HAL_GPIO_Init+0x2d8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a62:	e02c      	b.n	8001abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e029      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	3304      	adds	r3, #4
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e024      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e01f      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	330c      	adds	r3, #12
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e01a      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a92:	2304      	movs	r3, #4
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e013      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	611a      	str	r2, [r3, #16]
          break;
 8001aaa:	e009      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aac:	2308      	movs	r3, #8
 8001aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	615a      	str	r2, [r3, #20]
          break;
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
          break;
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          break;
 8001abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d801      	bhi.n	8001aca <HAL_GPIO_Init+0x13a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_Init+0x13e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d802      	bhi.n	8001adc <HAL_GPIO_Init+0x14c>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x152>
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	3b08      	subs	r3, #8
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	210f      	movs	r1, #15
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	6a39      	ldr	r1, [r7, #32]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8090 	beq.w	8001c30 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b10:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_GPIO_Init+0x2dc>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <HAL_GPIO_Init+0x2dc>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_GPIO_Init+0x2dc>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b28:	4a51      	ldr	r2, [pc, #324]	; (8001c70 <HAL_GPIO_Init+0x2e0>)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <HAL_GPIO_Init+0x2e4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1e0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1dc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1d8>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1e2>
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1e2>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1e2>
 8001b70:	2300      	movs	r3, #0
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b82:	493b      	ldr	r1, [pc, #236]	; (8001c70 <HAL_GPIO_Init+0x2e0>)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4937      	ldr	r1, [pc, #220]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4933      	ldr	r1, [pc, #204]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	492d      	ldr	r1, [pc, #180]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4929      	ldr	r1, [pc, #164]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4923      	ldr	r1, [pc, #140]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	491f      	ldr	r1, [pc, #124]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4919      	ldr	r1, [pc, #100]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4915      	ldr	r1, [pc, #84]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	3301      	adds	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f aeaf 	bne.w	80019a4 <HAL_GPIO_Init+0x14>
  }
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	372c      	adds	r7, #44	; 0x2c
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	10320000 	.word	0x10320000
 8001c58:	10310000 	.word	0x10310000
 8001c5c:	10220000 	.word	0x10220000
 8001c60:	10210000 	.word	0x10210000
 8001c64:	10120000 	.word	0x10120000
 8001c68:	10110000 	.word	0x10110000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc2:	787b      	ldrb	r3, [r7, #1]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc8:	887a      	ldrh	r2, [r7, #2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	041a      	lsls	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	611a      	str	r2, [r3, #16]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e26c      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d00c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x12c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d168      	bne.n	8001e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e246      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x76>
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a7f      	ldr	r2, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e02e      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0xbc>
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6a      	ldr	r2, [pc, #424]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a67      	ldr	r2, [pc, #412]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fcce 	bl	8001760 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fcca 	bl	8001760 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1fa      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe4>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fcba 	bl	8001760 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fcb6 	bl	8001760 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1e6      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x10c>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1ba      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fc6f 	bl	8001760 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fc6b 	bl	8001760 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e19b      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4927      	ldr	r1, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fc4e 	bl	8001760 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fc4a 	bl	8001760 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e17a      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03a      	beq.n	8001f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fc2e 	bl	8001760 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fc2a 	bl	8001760 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e15a      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f000 fa9a 	bl	8002460 <RCC_Delay>
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fc14 	bl	8001760 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc10 	bl	8001760 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d908      	bls.n	8001f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e140      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	42420000 	.word	0x42420000
 8001f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e9      	bne.n	8001f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a6 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b97      	ldr	r3, [pc, #604]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8a      	ldr	r2, [pc, #552]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fbd1 	bl	8001760 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff fbcd 	bl	8001760 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0fd      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x312>
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e02d      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x334>
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	e01c      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x356>
 8002020:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a6c      	ldr	r2, [pc, #432]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff fb81 	bl	8001760 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fb7d 	bl	8001760 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ab      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCC_OscConfig+0x37e>
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff fb6b 	bl	8001760 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff fb67 	bl	8001760 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e095      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8081 	beq.w	80021ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d061      	beq.n	800219c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d146      	bne.n	800216e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb3b 	bl	8001760 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fb37 	bl	8001760 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e067      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002116:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a19      	ldr	r1, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	430b      	orrs	r3, r1
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fb0b 	bl	8001760 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff fb07 	bl	8001760 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e037      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x46a>
 800216c:	e02f      	b.n	80021ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff faf4 	bl	8001760 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff faf0 	bl	8001760 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e020      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x498>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e013      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	42420060 	.word	0x42420060

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff fa44 	bl	8001760 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff fa40 	bl	8001760 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f9a2 	bl	80016dc <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08002cc4 	.word	0x08002cc4
 80023b0:	20000044 	.word	0x20000044
 80023b4:	20000048 	.word	0x20000048

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x30>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x36>
 80023e6:	e027      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	613b      	str	r3, [r7, #16]
      break;
 80023ec:	e027      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c5b      	lsrs	r3, r3, #17
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	fb02 f203 	mul.w	r2, r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e004      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_RCC_GetSysClockFreq+0xa4>)
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	613b      	str	r3, [r7, #16]
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	693b      	ldr	r3, [r7, #16]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	08002cd4 	.word	0x08002cd4
 8002458:	08002ce4 	.word	0x08002ce4
 800245c:	003d0900 	.word	0x003d0900

08002460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <RCC_Delay+0x34>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <RCC_Delay+0x38>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800247c:	bf00      	nop
  }
  while (Delay --);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <RCC_Delay+0x1c>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000044 	.word	0x20000044
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e041      	b.n	8002532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe ffaa 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 fa56 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e035      	b.n	80025c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_TIM_Base_Start_IT+0x90>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_TIM_Base_Start_IT+0x4e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d004      	beq.n	800258a <HAL_TIM_Base_Start_IT+0x4e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b06      	cmp	r3, #6
 800259a:	d010      	beq.n	80025be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	e007      	b.n	80025be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400

080025d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0202 	mvn.w	r2, #2
 8002608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f998 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f98b 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f99a 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0204 	mvn.w	r2, #4
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2202      	movs	r2, #2
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f972 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f965 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f974 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0208 	mvn.w	r2, #8
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f94c 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f93f 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f94e 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d020      	beq.n	800271c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01b      	beq.n	800271c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0210 	mvn.w	r2, #16
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2208      	movs	r2, #8
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f926 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f919 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f928 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fd02 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa6f 	bl	8002c42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8f8 	bl	8002978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0220 	mvn.w	r2, #32
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa42 	bl	8002c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_ConfigClockSource+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0b4      	b.n	800293a <HAL_TIM_ConfigClockSource+0x186>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d03e      	beq.n	8002888 <HAL_TIM_ConfigClockSource+0xd4>
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	f200 8087 	bhi.w	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	f000 8086 	beq.w	8002926 <HAL_TIM_ConfigClockSource+0x172>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	d87f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d01a      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xa6>
 8002824:	2b70      	cmp	r3, #112	; 0x70
 8002826:	d87b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d050      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x11a>
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d877      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d03c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xfa>
 8002834:	2b50      	cmp	r3, #80	; 0x50
 8002836:	d873      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d058      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x13a>
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d86f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d064      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	2b30      	cmp	r3, #48	; 0x30
 8002846:	d86b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b20      	cmp	r3, #32
 800284a:	d060      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d867      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05c      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b10      	cmp	r3, #16
 8002856:	d05a      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	e062      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f000 f96a 	bl	8002b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800287c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]
      break;
 8002886:	e04f      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f000 f953 	bl	8002b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028aa:	609a      	str	r2, [r3, #8]
      break;
 80028ac:	e03c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f8ca 	bl	8002a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2150      	movs	r1, #80	; 0x50
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f921 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 80028cc:	e02c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8e8 	bl	8002ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2160      	movs	r1, #96	; 0x60
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f911 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 80028ec:	e01c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f8aa 	bl	8002a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f901 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800290c:	e00c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 f8f8 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800291e:	e003      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e000      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
	...

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <TIM_Base_SetConfig+0xc0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_Base_SetConfig+0x28>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0x28>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <TIM_Base_SetConfig+0xc4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d108      	bne.n	80029c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_Base_SetConfig+0xc0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_Base_SetConfig+0x52>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x52>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <TIM_Base_SetConfig+0xc4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <TIM_Base_SetConfig+0xc0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]
  }
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400

08002a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 030a 	bic.w	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0210 	bic.w	r2, r3, #16
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f043 0307 	orr.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e041      	b.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10c      	bne.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400

08002c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	2600      	movs	r6, #0
 8002c58:	4d0c      	ldr	r5, [pc, #48]	; (8002c8c <__libc_init_array+0x38>)
 8002c5a:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	f000 f822 	bl	8002cac <_init>
 8002c68:	2600      	movs	r6, #0
 8002c6a:	4d0a      	ldr	r5, [pc, #40]	; (8002c94 <__libc_init_array+0x40>)
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <__libc_init_array+0x44>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002ce8 	.word	0x08002ce8
 8002c90:	08002ce8 	.word	0x08002ce8
 8002c94:	08002ce8 	.word	0x08002ce8
 8002c98:	08002cec 	.word	0x08002cec

08002c9c <memset>:
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4402      	add	r2, r0
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <memset+0xa>
 8002ca4:	4770      	bx	lr
 8002ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8002caa:	e7f9      	b.n	8002ca0 <memset+0x4>

08002cac <_init>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr

08002cb8 <_fini>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr
